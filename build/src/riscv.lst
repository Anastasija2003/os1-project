GAS LISTING /tmp/ccCh3VK6.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB56:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by marko on 20.4.22..
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../h/tcb.hpp"
   7:src/riscv.cpp **** #include "../h/MemoryAllocator.hpp"
   8:src/riscv.cpp **** #include "../h/kSemaphore.hpp"
   9:src/riscv.cpp **** #include "../test/printing.hpp"
  10:src/riscv.cpp **** #include "../h/kConsole.hpp"
  11:src/riscv.cpp **** #include "../lib/mem.h"
  12:src/riscv.cpp **** using Body = void (*)(void *);
  13:src/riscv.cpp **** void Riscv::popSppSpie()
  14:src/riscv.cpp **** {
  12              		.loc 1 14 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  15:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  20              		.loc 1 15 5
  21              		.loc 1 15 38 is_stmt 0
  22              	#APP
  23              	# 15 "src/riscv.cpp" 1
  16              	    __asm__ volatile("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 16 5 is_stmt 1
  27              		.loc 1 16 29 is_stmt 0
  28              	# 16 "src/riscv.cpp" 1
  17              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 17 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE56:
  42              		.section	.rodata.str1.8,"aMS",@progbits,1
GAS LISTING /tmp/ccCh3VK6.s 			page 2


  43              		.align	3
  44              	.LC0:
  45 0000 73636175 		.string	"scause "
  45      73652000 
  46              		.align	3
  47              	.LC1:
  48 0008 0A00     		.string	"\n"
  49 000a 00000000 		.align	3
  49      0000
  50              	.LC2:
  51 0010 73657063 		.string	"sepc "
  51      2000
  52              		.text
  53              		.align	2
  54              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  56              	_ZN5Riscv20handleSupervisorTrapEv:
  57              	.LFB57:
  18:src/riscv.cpp **** 
  19:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  20:src/riscv.cpp **** {
  58              		.loc 1 20 1 is_stmt 1
  59              		.cfi_startproc
  60 0020 130101F4 		addi	sp,sp,-192
  61              		.cfi_def_cfa_offset 192
  62 0024 233C110A 		sd	ra,184(sp)
  63 0028 2338810A 		sd	s0,176(sp)
  64 002c 2334910A 		sd	s1,168(sp)
  65 0030 2330210B 		sd	s2,160(sp)
  66              		.cfi_offset 1, -8
  67              		.cfi_offset 8, -16
  68              		.cfi_offset 9, -24
  69              		.cfi_offset 18, -32
  70 0034 1304010C 		addi	s0,sp,192
  71              		.cfi_def_cfa 8, 0
  21:src/riscv.cpp ****     uint64 volatile code;
  72              		.loc 1 21 5
  22:src/riscv.cpp ****     uint64 volatile a1;
  73              		.loc 1 22 5
  23:src/riscv.cpp ****     uint64 volatile a2;
  74              		.loc 1 23 5
  24:src/riscv.cpp ****     uint64 volatile a3;
  75              		.loc 1 24 5
  25:src/riscv.cpp ****     uint64 volatile a4;
  76              		.loc 1 25 5
  26:src/riscv.cpp ****     uint64 volatile a5;
  77              		.loc 1 26 5
  27:src/riscv.cpp ****     uint64 volatile a6;
  78              		.loc 1 27 5
  28:src/riscv.cpp ****     uint64 volatile a7;
  79              		.loc 1 28 5
  29:src/riscv.cpp ****     __asm__ volatile("mv %0,a0":"=r"(code));
  80              		.loc 1 29 5
  81              		.loc 1 29 44 is_stmt 0
  82              	#APP
  83              	# 29 "src/riscv.cpp" 1
  30              	    __asm__ volatile("mv %0,a1":"=r"(a1));
  84              		mv a5,a0
GAS LISTING /tmp/ccCh3VK6.s 			page 3


  85              	# 0 "" 2
  86              	#NO_APP
  87 003c 233CF4FC 		sd	a5,-40(s0)
  88              		.loc 1 30 5 is_stmt 1
  89              		.loc 1 30 42 is_stmt 0
  90              	#APP
  91              	# 30 "src/riscv.cpp" 1
  31              	    __asm__ volatile("mv %0,a2":"=r"(a2));
  92              		mv a5,a1
  93              	# 0 "" 2
  94              	#NO_APP
  95 0044 2338F4FC 		sd	a5,-48(s0)
  96              		.loc 1 31 5 is_stmt 1
  97              		.loc 1 31 42 is_stmt 0
  98              	#APP
  99              	# 31 "src/riscv.cpp" 1
  32              	    __asm__ volatile("mv %0,a3":"=r"(a3));
 100              		mv a5,a2
 101              	# 0 "" 2
 102              	#NO_APP
 103 004c 2334F4FC 		sd	a5,-56(s0)
 104              		.loc 1 32 5 is_stmt 1
 105              		.loc 1 32 42 is_stmt 0
 106              	#APP
 107              	# 32 "src/riscv.cpp" 1
  33              	    __asm__ volatile("mv %0,a4":"=r"(a4));
 108              		mv a5,a3
 109              	# 0 "" 2
 110              	#NO_APP
 111 0054 2330F4FC 		sd	a5,-64(s0)
 112              		.loc 1 33 5 is_stmt 1
 113              		.loc 1 33 42 is_stmt 0
 114              	#APP
 115              	# 33 "src/riscv.cpp" 1
  34              	    __asm__ volatile("mv %0,a5":"=r"(a5));
 116              		mv a5,a4
 117              	# 0 "" 2
 118              	#NO_APP
 119 005c 233CF4FA 		sd	a5,-72(s0)
 120              		.loc 1 34 5 is_stmt 1
 121              		.loc 1 34 42 is_stmt 0
 122              	#APP
 123              	# 34 "src/riscv.cpp" 1
  35              	    __asm__ volatile("mv %0,a6":"=r"(a6));
 124              		mv a5,a5
 125              	# 0 "" 2
 126              	#NO_APP
 127 0064 2338F4FA 		sd	a5,-80(s0)
 128              		.loc 1 35 5 is_stmt 1
 129              		.loc 1 35 42 is_stmt 0
 130              	#APP
 131              	# 35 "src/riscv.cpp" 1
  36              	    __asm__ volatile("mv %0,a7":"=r"(a7));
 132              		mv a5,a6
 133              	# 0 "" 2
 134              	#NO_APP
 135 006c 2334F4FA 		sd	a5,-88(s0)
GAS LISTING /tmp/ccCh3VK6.s 			page 4


 136              		.loc 1 36 5 is_stmt 1
 137              		.loc 1 36 42 is_stmt 0
 138              	#APP
 139              	# 36 "src/riscv.cpp" 1
  37              	    uint64 scause = r_scause();
 140              		mv a5,a7
 141              	# 0 "" 2
 142              	#NO_APP
 143 0074 2330F4FA 		sd	a5,-96(s0)
 144              		.loc 1 37 5 is_stmt 1
 145              	.LBB94:
 146              	.LBB95:
 147              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp **** class Riscv
  11:src/../h/riscv.hpp **** {
  12:src/../h/riscv.hpp **** public:
  13:src/../h/riscv.hpp **** 
  14:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  15:src/../h/riscv.hpp ****     static void popSppSpie();
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     // read register scause
  18:src/../h/riscv.hpp ****     static uint64 r_scause();
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     // write register scause
  21:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     // read register sepc
  24:src/../h/riscv.hpp ****     static uint64 r_sepc();
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     // write register sepc
  27:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // read register stvec
  30:src/../h/riscv.hpp ****     static uint64 r_stvec();
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // write register stvec
  33:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // read register stval
  36:src/../h/riscv.hpp ****     static uint64 r_stval();
  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     // write register stval
  39:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     enum BitMaskSip
  42:src/../h/riscv.hpp ****     {
  43:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  44:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
GAS LISTING /tmp/ccCh3VK6.s 			page 5


  45:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  46:src/../h/riscv.hpp ****     };
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     // mask set register sip
  49:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     // mask clear register sip
  52:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  53:src/../h/riscv.hpp **** 
  54:src/../h/riscv.hpp ****     // read register sip
  55:src/../h/riscv.hpp ****     static uint64 r_sip();
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     // write register sip
  58:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  59:src/../h/riscv.hpp **** 
  60:src/../h/riscv.hpp ****     enum BitMaskSstatus
  61:src/../h/riscv.hpp ****     {
  62:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  63:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  64:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  65:src/../h/riscv.hpp ****     };
  66:src/../h/riscv.hpp **** 
  67:src/../h/riscv.hpp ****     // mask set register sstatus
  68:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  69:src/../h/riscv.hpp **** 
  70:src/../h/riscv.hpp ****     // mask clear register sstatus
  71:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  72:src/../h/riscv.hpp **** 
  73:src/../h/riscv.hpp ****     // read register sstatus
  74:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     // write register sstatus
  77:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp ****     // supervisor trap
  80:src/../h/riscv.hpp ****     static void supervisorTrap();
  81:src/../h/riscv.hpp **** 
  82:src/../h/riscv.hpp **** private:
  83:src/../h/riscv.hpp **** 
  84:src/../h/riscv.hpp ****     // supervisor trap handler
  85:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
  86:src/../h/riscv.hpp **** 
  87:src/../h/riscv.hpp **** };
  88:src/../h/riscv.hpp **** 
  89:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  90:src/../h/riscv.hpp **** {
  91:src/../h/riscv.hpp ****     uint64 volatile scause;
 148              		.loc 2 91 5
  92:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 149              		.loc 2 92 5
 150              		.loc 2 92 72 is_stmt 0
 151              	#APP
 152              	# 92 "src/../h/riscv.hpp" 1
  93              	    return scause;
 153              		csrr a5, scause
 154              	# 0 "" 2
 155              	#NO_APP
GAS LISTING /tmp/ccCh3VK6.s 			page 6


 156 007c 233CF4F6 		sd	a5,-136(s0)
 157              		.loc 2 93 5 is_stmt 1
 158              		.loc 2 93 12 is_stmt 0
 159 0080 033784F7 		ld	a4,-136(s0)
 160              	.LVL0:
 161              	.LBE95:
 162              	.LBE94:
  38:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
 163              		.loc 1 38 5 is_stmt 1
 164              	.LBB96:
 165              		.loc 1 38 40 is_stmt 0
 166 0084 930687FF 		addi	a3,a4,-8
 167              		.loc 1 38 5
 168 0088 93071000 		li	a5,1
 169 008c 63FCD70A 		bleu	a3,a5,.L46
 170              	.LBE96:
  39:src/riscv.cpp ****     {
  40:src/riscv.cpp ****         // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
  41:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
  42:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  43:src/riscv.cpp ****         if(code == 0x01){                               //mem_alloc
  44:src/riscv.cpp ****             size_t size = (size_t) a1;
  45:src/riscv.cpp ****             void *addr = MemoryAllocator::mem_alloc(size);
  46:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(addr));
  47:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10 (fp)");
  48:src/riscv.cpp ****         } else if (code == 0x02){                       //mem_free
  49:src/riscv.cpp ****             void *addr = (void *)a1;
  50:src/riscv.cpp ****             int status = MemoryAllocator::mem_free(addr);
  51:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(status));
  52:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
  53:src/riscv.cpp ****         }else if(code == 0x11){                         //thread_create
  54:src/riscv.cpp ****             TCB **thread = (TCB**) a1;
  55:src/riscv.cpp ****             Body body = (Body) a2;
  56:src/riscv.cpp ****             void *arg = (void *) a3;
  57:src/riscv.cpp ****             uint64 *stack = (uint64 *) a4;
  58:src/riscv.cpp ****             int status = 0;
  59:src/riscv.cpp ****             *thread = (TCB::createThread(body,stack,arg));
  60:src/riscv.cpp ****             if(*thread == nullptr) status = -1;
  61:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(status));
  62:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
  63:src/riscv.cpp ****         }else if(code == 0x12){                         //thread_exit
  64:src/riscv.cpp ****             int status = TCB::exit();
  65:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(status));
  66:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
  67:src/riscv.cpp ****         }
  68:src/riscv.cpp ****         else if(code == 0x13){                          //thread_dispatch
  69:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
  70:src/riscv.cpp ****             TCB::dispatch();
  71:src/riscv.cpp ****         }else if(code == 0x21){                        //sem_open
  72:src/riscv.cpp ****             kSemaphore **sem = (kSemaphore**) a1;
  73:src/riscv.cpp ****             int val = (int)  a2;
  74:src/riscv.cpp ****             *sem = kSemaphore::create_sem(val);
  75:src/riscv.cpp ****             int status = 0;
  76:src/riscv.cpp ****             if(*sem == nullptr) status = -1;
  77:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(status));
  78:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
  79:src/riscv.cpp ****         }else if(code == 0x22){                         //sem_close
GAS LISTING /tmp/ccCh3VK6.s 			page 7


  80:src/riscv.cpp ****             kSemaphore *sem = (kSemaphore*) a1;
  81:src/riscv.cpp ****             int status = 0;
  82:src/riscv.cpp ****             if(sem == nullptr) status = -1;
  83:src/riscv.cpp ****             else status = sem->close();
  84:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(status));
  85:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
  86:src/riscv.cpp ****         }else if(code == 0x23){                         //sem_wait
  87:src/riscv.cpp ****             kSemaphore *sem = (kSemaphore*) a1;
  88:src/riscv.cpp ****             int status = 0;
  89:src/riscv.cpp ****             if(sem == nullptr) status = -1;
  90:src/riscv.cpp ****             else status = sem->wait();
  91:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(status));
  92:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
  93:src/riscv.cpp ****         }else if(code == 0x24){                         //sem_signal
  94:src/riscv.cpp ****             kSemaphore *sem = (kSemaphore*) a1;
  95:src/riscv.cpp ****             int status = 0;
  96:src/riscv.cpp ****             if(sem == nullptr) status = -1;
  97:src/riscv.cpp ****             else status = sem->signal();
  98:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(status));
  99:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
 100:src/riscv.cpp ****         }else if(code == 0x25){                         //sem_timedwait
 101:src/riscv.cpp ****             kSemaphore *sem = (kSemaphore*)a1;
 102:src/riscv.cpp ****             time_t t = (time_t) a2;
 103:src/riscv.cpp ****             int status = 0;
 104:src/riscv.cpp ****             if(sem == nullptr) status = -1;
 105:src/riscv.cpp ****             else status = sem->timedWait(t);
 106:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(status));
 107:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
 108:src/riscv.cpp ****         }else if(code == 0x26){                         //sem_trywait
 109:src/riscv.cpp ****             kSemaphore *sem = (kSemaphore*) a1;
 110:src/riscv.cpp ****             int status = 0;
 111:src/riscv.cpp ****             if(sem == nullptr) status = -1;
 112:src/riscv.cpp ****             else status = sem->trywait();
 113:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(status));
 114:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
 115:src/riscv.cpp ****         }
 116:src/riscv.cpp ****         else if(code == 0x31){                         //time_sleep
 117:src/riscv.cpp ****             uint64 time = a1;
 118:src/riscv.cpp ****             int status = TCB::sleep(time);
 119:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(status));
 120:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
 121:src/riscv.cpp ****         }
 122:src/riscv.cpp ****         else if(code == 0x41){  //getc
 123:src/riscv.cpp ****             char volatile status = *((char *)CONSOLE_STATUS);
 124:src/riscv.cpp ****             while( (CONSOLE_RX_STATUS_BIT & status) && !kConsole::getInput()->isFull()){
 125:src/riscv.cpp ****                 char* volatile rx = (char *)CONSOLE_RX_DATA;
 126:src/riscv.cpp ****                 char volatile c = *rx;
 127:src/riscv.cpp ****                 //putc(c);
 128:src/riscv.cpp ****                 kConsole::getInput()->put(c);
 129:src/riscv.cpp ****                 status = *((char *)CONSOLE_STATUS);
 130:src/riscv.cpp ****             }
 131:src/riscv.cpp ****             char volatile c = kConsole::getc();
 132:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(c));
 133:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
 134:src/riscv.cpp ****         }
 135:src/riscv.cpp ****         else if(code == 0x42){ //putc
 136:src/riscv.cpp ****             volatile char c = (char) a1;
GAS LISTING /tmp/ccCh3VK6.s 			page 8


 137:src/riscv.cpp ****             kConsole::putc(c);
 138:src/riscv.cpp ****             char volatile status = *((char *)CONSOLE_STATUS);
 139:src/riscv.cpp ****             while ((status &  CONSOLE_TX_STATUS_BIT ) && !kConsole::getOutput()->isEmpty()) {
 140:src/riscv.cpp ****                 char  c = kConsole::getOutput()->get();
 141:src/riscv.cpp ****                 *((uint64 *) CONSOLE_TX_DATA)= c;
 142:src/riscv.cpp ****                 status = *((char *)CONSOLE_STATUS);
 143:src/riscv.cpp ****             }
 144:src/riscv.cpp ****         }
 145:src/riscv.cpp ****         w_sstatus(sstatus);
 146:src/riscv.cpp ****         w_sepc(sepc);
 147:src/riscv.cpp ****     }
 148:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL)
 171              		.loc 1 148 10 is_stmt 1
 172              	.LBB349:
 173              	.LBB97:
 174 0090 9307F0FF 		li	a5,-1
 175 0094 9397F703 		slli	a5,a5,63
 176 0098 93871700 		addi	a5,a5,1
 177 009c 630CF744 		beq	a4,a5,.L47
 178              	.LBE97:
 179              	.LBE349:
 149:src/riscv.cpp ****     {
 150:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
 151:src/riscv.cpp **** 
 152:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 153:src/riscv.cpp ****         TCB::wake(); // skloni i iz wait timer dodaj bool
 154:src/riscv.cpp ****         kSemaphore::getWaitTimer();
 155:src/riscv.cpp ****         TCB::timeSliceCounter++;
 156:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 157:src/riscv.cpp ****         {
 158:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 159:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 160:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 161:src/riscv.cpp ****             TCB::dispatch();
 162:src/riscv.cpp ****             w_sstatus(sstatus);
 163:src/riscv.cpp ****             w_sepc(sepc);
 164:src/riscv.cpp ****         }
 165:src/riscv.cpp ****     }
 166:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL)
 180              		.loc 1 166 10
 181              	.LBB350:
 182              	.LBB142:
 183              	.LBB98:
 184 00a0 9307F0FF 		li	a5,-1
 185 00a4 9397F703 		slli	a5,a5,63
 186 00a8 93879700 		addi	a5,a5,9
 187 00ac 6308F74C 		beq	a4,a5,.L48
 188              	.LBB99:
 167:src/riscv.cpp ****     {
 168:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard)
 169:src/riscv.cpp ****         uint64 num = plic_claim();
 170:src/riscv.cpp ****         if( num == CONSOLE_IRQ){
 171:src/riscv.cpp ****             char volatile status = *((char *)CONSOLE_STATUS);
 172:src/riscv.cpp ****             while( (CONSOLE_RX_STATUS_BIT & status) && !kConsole::getInput()->isFull()){
 173:src/riscv.cpp ****                 char* volatile rx = (char *)CONSOLE_RX_DATA;
 174:src/riscv.cpp ****                 char volatile c = *rx;
 175:src/riscv.cpp ****                 putc(c);
GAS LISTING /tmp/ccCh3VK6.s 			page 9


 176:src/riscv.cpp ****                 kConsole::getInput()->put(c);
 177:src/riscv.cpp ****                 status = *((char *)CONSOLE_STATUS);
 178:src/riscv.cpp ****             }
 179:src/riscv.cpp ****             status = *((char *)CONSOLE_STATUS);
 180:src/riscv.cpp ****             while ((status &  CONSOLE_TX_STATUS_BIT ) && !kConsole::getOutput()->isEmpty()) {
 181:src/riscv.cpp ****                 char  c = kConsole::getOutput()->get();
 182:src/riscv.cpp ****                 *((uint64 *) CONSOLE_TX_DATA)= c;
 183:src/riscv.cpp ****                 status = *((char *)CONSOLE_STATUS);
 184:src/riscv.cpp ****             }
 185:src/riscv.cpp **** 
 186:src/riscv.cpp ****         }
 187:src/riscv.cpp ****         plic_complete((int) num);
 188:src/riscv.cpp ****     }
 189:src/riscv.cpp ****     else
 190:src/riscv.cpp ****     {
 191:src/riscv.cpp ****         uint64 volatile sepc = r_sepc();
 189              		.loc 1 191 9
 190              	.LBB100:
 191              	.LBB101:
  94:src/../h/riscv.hpp **** }
  95:src/../h/riscv.hpp **** 
  96:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
  97:src/../h/riscv.hpp **** {
  98:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
  99:src/../h/riscv.hpp **** }
 100:src/../h/riscv.hpp **** 
 101:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 102:src/../h/riscv.hpp **** {
 103:src/../h/riscv.hpp ****     uint64 volatile sepc;
 192              		.loc 2 103 5
 104:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 193              		.loc 2 104 5
 194              		.loc 2 104 64 is_stmt 0
 195              	#APP
 196              	# 104 "src/../h/riscv.hpp" 1
 105              	    return sepc;
 197              		csrr a5, sepc
 198              	# 0 "" 2
 199              	#NO_APP
 200 00b4 233CF4F8 		sd	a5,-104(s0)
 201              		.loc 2 105 5 is_stmt 1
 202              		.loc 2 105 12 is_stmt 0
 203 00b8 833784F9 		ld	a5,-104(s0)
 204              	.LBE101:
 205              	.LBE100:
 206              		.loc 1 191 39
 207 00bc 2330F4F8 		sd	a5,-128(s0)
 192:src/riscv.cpp ****         uint64 volatile scause = r_scause();
 208              		.loc 1 192 9 is_stmt 1
 209              	.LBB102:
 210              	.LBB103:
  91:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 211              		.loc 2 91 5
  92:src/../h/riscv.hpp ****     return scause;
 212              		.loc 2 92 5
  92:src/../h/riscv.hpp ****     return scause;
 213              		.loc 2 92 72 is_stmt 0
GAS LISTING /tmp/ccCh3VK6.s 			page 10


 214              	#APP
 215              	# 92 "src/../h/riscv.hpp" 1
 216              		csrr a5, scause
 217              	# 0 "" 2
 218              	#NO_APP
 219 00c4 2338F4F8 		sd	a5,-112(s0)
  93:src/../h/riscv.hpp **** }
 220              		.loc 2 93 5 is_stmt 1
  93:src/../h/riscv.hpp **** }
 221              		.loc 2 93 12 is_stmt 0
 222 00c8 833704F9 		ld	a5,-112(s0)
 223              	.LBE103:
 224              	.LBE102:
 225              		.loc 1 192 43
 226 00cc 2334F4F8 		sd	a5,-120(s0)
 193:src/riscv.cpp ****         printString("scause ");
 227              		.loc 1 193 9 is_stmt 1
 228              		.loc 1 193 20 is_stmt 0
 229 00d0 17050000 		lla	a0,.LC0
 229      13050500 
 230 00d8 97000000 		call	_Z11printStringPKc@plt
 230      E7800000 
 231              	.LVL1:
 194:src/riscv.cpp ****         printInt(scause);
 232              		.loc 1 194 9 is_stmt 1
 233              		.loc 1 194 17 is_stmt 0
 234 00e0 033584F8 		ld	a0,-120(s0)
 235 00e4 13060000 		li	a2,0
 236 00e8 9305A000 		li	a1,10
 237 00ec 1B050500 		sext.w	a0,a0
 238 00f0 97000000 		call	_Z8printIntiii@plt
 238      E7800000 
 239              	.LVL2:
 195:src/riscv.cpp ****         printString("\n");
 240              		.loc 1 195 9 is_stmt 1
 241              		.loc 1 195 20 is_stmt 0
 242 00f8 17050000 		lla	a0,.LC1
 242      13050500 
 243 0100 97000000 		call	_Z11printStringPKc@plt
 243      E7800000 
 244              	.LVL3:
 196:src/riscv.cpp ****         printString("sepc ");
 245              		.loc 1 196 9 is_stmt 1
 246              		.loc 1 196 20 is_stmt 0
 247 0108 17050000 		lla	a0,.LC2
 247      13050500 
 248 0110 97000000 		call	_Z11printStringPKc@plt
 248      E7800000 
 249              	.LVL4:
 197:src/riscv.cpp ****         printInt(sepc,16);
 250              		.loc 1 197 9 is_stmt 1
 251              		.loc 1 197 17 is_stmt 0
 252 0118 033504F8 		ld	a0,-128(s0)
 253 011c 13060000 		li	a2,0
 254 0120 93050001 		li	a1,16
 255 0124 1B050500 		sext.w	a0,a0
 256 0128 97000000 		call	_Z8printIntiii@plt
GAS LISTING /tmp/ccCh3VK6.s 			page 11


 256      E7800000 
 257              	.LVL5:
 198:src/riscv.cpp ****         printString("\n");
 258              		.loc 1 198 9 is_stmt 1
 259              		.loc 1 198 20 is_stmt 0
 260 0130 17050000 		lla	a0,.LC1
 260      13050500 
 261 0138 97000000 		call	_Z11printStringPKc@plt
 261      E7800000 
 262              	.LVL6:
 263              	.L37:
 199:src/riscv.cpp ****         while(true);
 264              		.loc 1 199 9 is_stmt 1 discriminator 1
 265              		.loc 1 199 9 discriminator 1
 266 0140 6F000000 		j	.L37
 267              	.LVL7:
 268              	.L46:
 269              	.LBE99:
 270              	.LBE98:
 271              	.LBE142:
 272              	.LBB143:
  41:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 273              		.loc 1 41 9
 274              	.LBB144:
 275              	.LBB145:
 103:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 276              		.loc 2 103 5
 104:src/../h/riscv.hpp ****     return sepc;
 277              		.loc 2 104 5
 104:src/../h/riscv.hpp ****     return sepc;
 278              		.loc 2 104 64 is_stmt 0
 279              	#APP
 280              	# 104 "src/../h/riscv.hpp" 1
 281              		csrr a5, sepc
 282              	# 0 "" 2
 283              	#NO_APP
 284 0148 2334F4F8 		sd	a5,-120(s0)
 285              		.loc 2 105 5 is_stmt 1
 286              		.loc 2 105 12 is_stmt 0
 287 014c 833784F8 		ld	a5,-120(s0)
 288              	.LBE145:
 289              	.LBE144:
  41:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 290              		.loc 1 41 41
 291 0150 93874700 		addi	a5,a5,4
  41:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 292              		.loc 1 41 43
 293 0154 2334F4F4 		sd	a5,-184(s0)
  42:src/riscv.cpp ****         if(code == 0x01){                               //mem_alloc
 294              		.loc 1 42 9 is_stmt 1
 295              	.LBB146:
 296              	.LBB147:
 106:src/../h/riscv.hpp **** }
 107:src/../h/riscv.hpp **** 
 108:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 109:src/../h/riscv.hpp **** {
 110:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
GAS LISTING /tmp/ccCh3VK6.s 			page 12


 111:src/../h/riscv.hpp **** }
 112:src/../h/riscv.hpp **** 
 113:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 114:src/../h/riscv.hpp **** {
 115:src/../h/riscv.hpp ****     uint64 volatile stvec;
 116:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 117:src/../h/riscv.hpp ****     return stvec;
 118:src/../h/riscv.hpp **** }
 119:src/../h/riscv.hpp **** 
 120:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 121:src/../h/riscv.hpp **** {
 122:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 123:src/../h/riscv.hpp **** }
 124:src/../h/riscv.hpp **** 
 125:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 126:src/../h/riscv.hpp **** {
 127:src/../h/riscv.hpp ****     uint64 volatile stval;
 128:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 129:src/../h/riscv.hpp ****     return stval;
 130:src/../h/riscv.hpp **** }
 131:src/../h/riscv.hpp **** 
 132:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 133:src/../h/riscv.hpp **** {
 134:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 135:src/../h/riscv.hpp **** }
 136:src/../h/riscv.hpp **** 
 137:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 138:src/../h/riscv.hpp **** {
 139:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 140:src/../h/riscv.hpp **** }
 141:src/../h/riscv.hpp **** 
 142:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 143:src/../h/riscv.hpp **** {
 144:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 145:src/../h/riscv.hpp **** }
 146:src/../h/riscv.hpp **** 
 147:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 148:src/../h/riscv.hpp **** {
 149:src/../h/riscv.hpp ****     uint64 volatile sip;
 150:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 151:src/../h/riscv.hpp ****     return sip;
 152:src/../h/riscv.hpp **** }
 153:src/../h/riscv.hpp **** 
 154:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 155:src/../h/riscv.hpp **** {
 156:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 157:src/../h/riscv.hpp **** }
 158:src/../h/riscv.hpp **** 
 159:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 160:src/../h/riscv.hpp **** {
 161:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 162:src/../h/riscv.hpp **** }
 163:src/../h/riscv.hpp **** 
 164:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 165:src/../h/riscv.hpp **** {
 166:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 167:src/../h/riscv.hpp **** }
GAS LISTING /tmp/ccCh3VK6.s 			page 13


 168:src/../h/riscv.hpp **** 
 169:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 170:src/../h/riscv.hpp **** {
 171:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 297              		.loc 2 171 5
 172:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 298              		.loc 2 172 5
 299              		.loc 2 172 76 is_stmt 0
 300              	#APP
 301              	# 172 "src/../h/riscv.hpp" 1
 173              	    return sstatus;
 302              		csrr a5, sstatus
 303              	# 0 "" 2
 304              	#NO_APP
 305 015c 2330F4F8 		sd	a5,-128(s0)
 306              		.loc 2 173 5 is_stmt 1
 307              		.loc 2 173 12 is_stmt 0
 308 0160 833704F8 		ld	a5,-128(s0)
 309              	.LBE147:
 310              	.LBE146:
  42:src/riscv.cpp ****         if(code == 0x01){                               //mem_alloc
 311              		.loc 1 42 45
 312 0164 2338F4F4 		sd	a5,-176(s0)
  43:src/riscv.cpp ****             size_t size = (size_t) a1;
 313              		.loc 1 43 9 is_stmt 1
 314              	.LBB148:
  43:src/riscv.cpp ****             size_t size = (size_t) a1;
 315              		.loc 1 43 17 is_stmt 0
 316 0168 033784FD 		ld	a4,-40(s0)
 317              	.LVL8:
  43:src/riscv.cpp ****             size_t size = (size_t) a1;
 318              		.loc 1 43 9
 319 016c 93071000 		li	a5,1
 320 0170 630EF710 		beq	a4,a5,.L49
 321              	.LBE148:
 322              	.LBE143:
 323              	.LBE350:
  48:src/riscv.cpp ****             void *addr = (void *)a1;
 324              		.loc 1 48 16 is_stmt 1
 325              	.LBB351:
 326              	.LBB331:
 327              	.LBB311:
 328              	.LBB149:
  48:src/riscv.cpp ****             void *addr = (void *)a1;
 329              		.loc 1 48 25 is_stmt 0
 330 0174 033784FD 		ld	a4,-40(s0)
  48:src/riscv.cpp ****             void *addr = (void *)a1;
 331              		.loc 1 48 16
 332 0178 93072000 		li	a5,2
 333 017c 6306F714 		beq	a4,a5,.L50
 334              	.LBE149:
 335              	.LBE311:
 336              	.LBE331:
 337              	.LBE351:
  53:src/riscv.cpp ****             TCB **thread = (TCB**) a1;
 338              		.loc 1 53 15 is_stmt 1
 339              	.LBB352:
GAS LISTING /tmp/ccCh3VK6.s 			page 14


 340              	.LBB332:
 341              	.LBB312:
 342              	.LBB295:
 343              	.LBB150:
  53:src/riscv.cpp ****             TCB **thread = (TCB**) a1;
 344              		.loc 1 53 23 is_stmt 0
 345 0180 033784FD 		ld	a4,-40(s0)
  53:src/riscv.cpp ****             TCB **thread = (TCB**) a1;
 346              		.loc 1 53 15
 347 0184 93071001 		li	a5,17
 348 0188 630CF714 		beq	a4,a5,.L51
 349              	.LBE150:
 350              	.LBE295:
 351              	.LBE312:
 352              	.LBE332:
 353              	.LBE352:
  63:src/riscv.cpp ****             int status = TCB::exit();
 354              		.loc 1 63 15 is_stmt 1
 355              	.LBB353:
 356              	.LBB333:
 357              	.LBB313:
 358              	.LBB296:
 359              	.LBB280:
 360              	.LBB151:
  63:src/riscv.cpp ****             int status = TCB::exit();
 361              		.loc 1 63 23 is_stmt 0
 362 018c 033784FD 		ld	a4,-40(s0)
  63:src/riscv.cpp ****             int status = TCB::exit();
 363              		.loc 1 63 15
 364 0190 93072001 		li	a5,18
 365 0194 6302F718 		beq	a4,a5,.L52
 366              	.LBE151:
 367              	.LBE280:
 368              	.LBE296:
 369              	.LBE313:
 370              	.LBE333:
 371              	.LBE353:
  68:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 372              		.loc 1 68 14 is_stmt 1
 373              	.LBB354:
 374              	.LBB334:
 375              	.LBB314:
 376              	.LBB297:
 377              	.LBB281:
 378              	.LBB265:
 379              	.LBB152:
  68:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 380              		.loc 1 68 22 is_stmt 0
 381 0198 033784FD 		ld	a4,-40(s0)
  68:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 382              		.loc 1 68 14
 383 019c 93073001 		li	a5,19
 384 01a0 6306F718 		beq	a4,a5,.L53
 385              	.LBE152:
 386              	.LBE265:
 387              	.LBE281:
 388              	.LBE297:
GAS LISTING /tmp/ccCh3VK6.s 			page 15


 389              	.LBE314:
 390              	.LBE334:
 391              	.LBE354:
  71:src/riscv.cpp ****             kSemaphore **sem = (kSemaphore**) a1;
 392              		.loc 1 71 15 is_stmt 1
 393              	.LBB355:
 394              	.LBB335:
 395              	.LBB315:
 396              	.LBB298:
 397              	.LBB282:
 398              	.LBB266:
 399              	.LBB252:
 400              	.LBB153:
  71:src/riscv.cpp ****             kSemaphore **sem = (kSemaphore**) a1;
 401              		.loc 1 71 23 is_stmt 0
 402 01a4 033784FD 		ld	a4,-40(s0)
  71:src/riscv.cpp ****             kSemaphore **sem = (kSemaphore**) a1;
 403              		.loc 1 71 15
 404 01a8 93071002 		li	a5,33
 405 01ac 630CF718 		beq	a4,a5,.L54
 406              	.LBE153:
 407              	.LBE252:
 408              	.LBE266:
 409              	.LBE282:
 410              	.LBE298:
 411              	.LBE315:
 412              	.LBE335:
 413              	.LBE355:
  79:src/riscv.cpp ****             kSemaphore *sem = (kSemaphore*) a1;
 414              		.loc 1 79 15 is_stmt 1
 415              	.LBB356:
 416              	.LBB336:
 417              	.LBB316:
 418              	.LBB299:
 419              	.LBB283:
 420              	.LBB267:
 421              	.LBB253:
 422              	.LBB241:
 423              	.LBB154:
  79:src/riscv.cpp ****             kSemaphore *sem = (kSemaphore*) a1;
 424              		.loc 1 79 23 is_stmt 0
 425 01b0 033784FD 		ld	a4,-40(s0)
  79:src/riscv.cpp ****             kSemaphore *sem = (kSemaphore*) a1;
 426              		.loc 1 79 15
 427 01b4 93072002 		li	a5,34
 428 01b8 6300F71C 		beq	a4,a5,.L55
 429              	.LBE154:
 430              	.LBE241:
 431              	.LBE253:
 432              	.LBE267:
 433              	.LBE283:
 434              	.LBE299:
 435              	.LBE316:
 436              	.LBE336:
 437              	.LBE356:
  86:src/riscv.cpp ****             kSemaphore *sem = (kSemaphore*) a1;
 438              		.loc 1 86 15 is_stmt 1
GAS LISTING /tmp/ccCh3VK6.s 			page 16


 439              	.LBB357:
 440              	.LBB337:
 441              	.LBB317:
 442              	.LBB300:
 443              	.LBB284:
 444              	.LBB268:
 445              	.LBB254:
 446              	.LBB242:
 447              	.LBB229:
 448              	.LBB155:
  86:src/riscv.cpp ****             kSemaphore *sem = (kSemaphore*) a1;
 449              		.loc 1 86 23 is_stmt 0
 450 01bc 033784FD 		ld	a4,-40(s0)
  86:src/riscv.cpp ****             kSemaphore *sem = (kSemaphore*) a1;
 451              		.loc 1 86 15
 452 01c0 93073002 		li	a5,35
 453 01c4 630EF71C 		beq	a4,a5,.L56
 454              	.LBE155:
 455              	.LBE229:
 456              	.LBE242:
 457              	.LBE254:
 458              	.LBE268:
 459              	.LBE284:
 460              	.LBE300:
 461              	.LBE317:
 462              	.LBE337:
 463              	.LBE357:
  93:src/riscv.cpp ****             kSemaphore *sem = (kSemaphore*) a1;
 464              		.loc 1 93 15 is_stmt 1
 465              	.LBB358:
 466              	.LBB338:
 467              	.LBB318:
 468              	.LBB301:
 469              	.LBB285:
 470              	.LBB269:
 471              	.LBB255:
 472              	.LBB243:
 473              	.LBB230:
 474              	.LBB218:
 475              	.LBB156:
  93:src/riscv.cpp ****             kSemaphore *sem = (kSemaphore*) a1;
 476              		.loc 1 93 23 is_stmt 0
 477 01c8 033784FD 		ld	a4,-40(s0)
  93:src/riscv.cpp ****             kSemaphore *sem = (kSemaphore*) a1;
 478              		.loc 1 93 15
 479 01cc 93074002 		li	a5,36
 480 01d0 630CF71E 		beq	a4,a5,.L57
 481              	.LBE156:
 482              	.LBE218:
 483              	.LBE230:
 484              	.LBE243:
 485              	.LBE255:
 486              	.LBE269:
 487              	.LBE285:
 488              	.LBE301:
 489              	.LBE318:
 490              	.LBE338:
GAS LISTING /tmp/ccCh3VK6.s 			page 17


 491              	.LBE358:
 100:src/riscv.cpp ****             kSemaphore *sem = (kSemaphore*)a1;
 492              		.loc 1 100 15 is_stmt 1
 493              	.LBB359:
 494              	.LBB339:
 495              	.LBB319:
 496              	.LBB302:
 497              	.LBB286:
 498              	.LBB270:
 499              	.LBB256:
 500              	.LBB244:
 501              	.LBB231:
 502              	.LBB219:
 503              	.LBB208:
 504              	.LBB157:
 100:src/riscv.cpp ****             kSemaphore *sem = (kSemaphore*)a1;
 505              		.loc 1 100 23 is_stmt 0
 506 01d4 033784FD 		ld	a4,-40(s0)
 100:src/riscv.cpp ****             kSemaphore *sem = (kSemaphore*)a1;
 507              		.loc 1 100 15
 508 01d8 93075002 		li	a5,37
 509 01dc 630AF720 		beq	a4,a5,.L58
 510              	.LBE157:
 511              	.LBE208:
 512              	.LBE219:
 513              	.LBE231:
 514              	.LBE244:
 515              	.LBE256:
 516              	.LBE270:
 517              	.LBE286:
 518              	.LBE302:
 519              	.LBE319:
 520              	.LBE339:
 521              	.LBE359:
 108:src/riscv.cpp ****             kSemaphore *sem = (kSemaphore*) a1;
 522              		.loc 1 108 15 is_stmt 1
 523              	.LBB360:
 524              	.LBB340:
 525              	.LBB320:
 526              	.LBB303:
 527              	.LBB287:
 528              	.LBB271:
 529              	.LBB257:
 530              	.LBB245:
 531              	.LBB232:
 532              	.LBB220:
 533              	.LBB209:
 534              	.LBB199:
 535              	.LBB158:
 108:src/riscv.cpp ****             kSemaphore *sem = (kSemaphore*) a1;
 536              		.loc 1 108 23 is_stmt 0
 537 01e0 033784FD 		ld	a4,-40(s0)
 108:src/riscv.cpp ****             kSemaphore *sem = (kSemaphore*) a1;
 538              		.loc 1 108 15
 539 01e4 93076002 		li	a5,38
 540 01e8 630AF722 		beq	a4,a5,.L59
 541              	.LBE158:
GAS LISTING /tmp/ccCh3VK6.s 			page 18


 542              	.LBE199:
 543              	.LBE209:
 544              	.LBE220:
 545              	.LBE232:
 546              	.LBE245:
 547              	.LBE257:
 548              	.LBE271:
 549              	.LBE287:
 550              	.LBE303:
 551              	.LBE320:
 552              	.LBE340:
 553              	.LBE360:
 116:src/riscv.cpp ****             uint64 time = a1;
 554              		.loc 1 116 14 is_stmt 1
 555              	.LBB361:
 556              	.LBB341:
 557              	.LBB321:
 558              	.LBB304:
 559              	.LBB288:
 560              	.LBB272:
 561              	.LBB258:
 562              	.LBB246:
 563              	.LBB233:
 564              	.LBB221:
 565              	.LBB210:
 566              	.LBB200:
 567              	.LBB191:
 568              	.LBB159:
 116:src/riscv.cpp ****             uint64 time = a1;
 569              		.loc 1 116 22 is_stmt 0
 570 01ec 033784FD 		ld	a4,-40(s0)
 116:src/riscv.cpp ****             uint64 time = a1;
 571              		.loc 1 116 14
 572 01f0 93071003 		li	a5,49
 573 01f4 6308F724 		beq	a4,a5,.L60
 574              	.LBE159:
 575              	.LBE191:
 576              	.LBE200:
 577              	.LBE210:
 578              	.LBE221:
 579              	.LBE233:
 580              	.LBE246:
 581              	.LBE258:
 582              	.LBE272:
 583              	.LBE288:
 584              	.LBE304:
 585              	.LBE321:
 586              	.LBE341:
 587              	.LBE361:
 122:src/riscv.cpp ****             char volatile status = *((char *)CONSOLE_STATUS);
 588              		.loc 1 122 14 is_stmt 1
 589              	.LBB362:
 590              	.LBB342:
 591              	.LBB322:
 592              	.LBB305:
 593              	.LBB289:
 594              	.LBB273:
GAS LISTING /tmp/ccCh3VK6.s 			page 19


 595              	.LBB259:
 596              	.LBB247:
 597              	.LBB234:
 598              	.LBB222:
 599              	.LBB211:
 600              	.LBB201:
 601              	.LBB192:
 602              	.LBB184:
 603              	.LBB160:
 122:src/riscv.cpp ****             char volatile status = *((char *)CONSOLE_STATUS);
 604              		.loc 1 122 22 is_stmt 0
 605 01f8 033784FD 		ld	a4,-40(s0)
 122:src/riscv.cpp ****             char volatile status = *((char *)CONSOLE_STATUS);
 606              		.loc 1 122 14
 607 01fc 93071004 		li	a5,65
 608 0200 630EF724 		beq	a4,a5,.L61
 609              	.LBE160:
 610              	.LBE184:
 611              	.LBE192:
 612              	.LBE201:
 613              	.LBE211:
 614              	.LBE222:
 615              	.LBE234:
 616              	.LBE247:
 617              	.LBE259:
 618              	.LBE273:
 619              	.LBE289:
 620              	.LBE305:
 621              	.LBE322:
 622              	.LBE342:
 623              	.LBE362:
 135:src/riscv.cpp ****             volatile char c = (char) a1;
 624              		.loc 1 135 14 is_stmt 1
 625              	.LBB363:
 626              	.LBB343:
 627              	.LBB323:
 628              	.LBB306:
 629              	.LBB290:
 630              	.LBB274:
 631              	.LBB260:
 632              	.LBB248:
 633              	.LBB235:
 634              	.LBB223:
 635              	.LBB212:
 636              	.LBB202:
 637              	.LBB193:
 638              	.LBB185:
 639              	.LBB179:
 640              	.LBB161:
 135:src/riscv.cpp ****             volatile char c = (char) a1;
 641              		.loc 1 135 22 is_stmt 0
 642 0204 033784FD 		ld	a4,-40(s0)
 135:src/riscv.cpp ****             volatile char c = (char) a1;
 643              		.loc 1 135 14
 644 0208 93072004 		li	a5,66
 645 020c 631AF708 		bne	a4,a5,.L6
 646              	.LBB162:
GAS LISTING /tmp/ccCh3VK6.s 			page 20


 136:src/riscv.cpp ****             kConsole::putc(c);
 647              		.loc 1 136 13 is_stmt 1
 136:src/riscv.cpp ****             kConsole::putc(c);
 648              		.loc 1 136 38 is_stmt 0
 649 0210 833704FD 		ld	a5,-48(s0)
 650 0214 93F7F70F 		andi	a5,a5,0xff
 651 0218 2302F4F4 		sb	a5,-188(s0)
 137:src/riscv.cpp ****             char volatile status = *((char *)CONSOLE_STATUS);
 652              		.loc 1 137 13 is_stmt 1
 137:src/riscv.cpp ****             char volatile status = *((char *)CONSOLE_STATUS);
 653              		.loc 1 137 27 is_stmt 0
 654 021c 034544F4 		lbu	a0,-188(s0)
 655 0220 1375F50F 		andi	a0,a0,0xff
 656 0224 97000000 		call	_ZN8kConsole4putcEc@plt
 656      E7800000 
 657              	.LVL9:
 138:src/riscv.cpp ****             while ((status &  CONSOLE_TX_STATUS_BIT ) && !kConsole::getOutput()->isEmpty()) {
 658              		.loc 1 138 13 is_stmt 1
 138:src/riscv.cpp ****             while ((status &  CONSOLE_TX_STATUS_BIT ) && !kConsole::getOutput()->isEmpty()) {
 659              		.loc 1 138 36 is_stmt 0
 660 022c 97070000 		la	a5,CONSOLE_STATUS
 660      83B70700 
 661 0234 83B40700 		ld	s1,0(a5)
 662 0238 83C70400 		lbu	a5,0(s1)
 138:src/riscv.cpp ****             while ((status &  CONSOLE_TX_STATUS_BIT ) && !kConsole::getOutput()->isEmpty()) {
 663              		.loc 1 138 27
 664 023c A302F4F4 		sb	a5,-187(s0)
 665              	.L28:
 139:src/riscv.cpp ****                 char  c = kConsole::getOutput()->get();
 666              		.loc 1 139 13 is_stmt 1
 139:src/riscv.cpp ****                 char  c = kConsole::getOutput()->get();
 667              		.loc 1 139 55
 139:src/riscv.cpp ****                 char  c = kConsole::getOutput()->get();
 668              		.loc 1 139 21 is_stmt 0
 669 0240 834754F4 		lbu	a5,-187(s0)
 670 0244 93F7F70F 		andi	a5,a5,0xff
 139:src/riscv.cpp ****                 char  c = kConsole::getOutput()->get();
 671              		.loc 1 139 55
 672 0248 93F70702 		andi	a5,a5,32
 673 024c 638A0704 		beqz	a5,.L6
 674              	.LBB163:
 675              	.LBB164:
 676              		.file 3 "src/../h/kConsole.hpp"
   1:src/../h/kConsole.hpp **** //
   2:src/../h/kConsole.hpp **** // Created by os on 5/16/24.
   3:src/../h/kConsole.hpp **** //
   4:src/../h/kConsole.hpp **** 
   5:src/../h/kConsole.hpp **** #ifndef PROJECT_BASE_KCONSOLE_HPP
   6:src/../h/kConsole.hpp **** #define PROJECT_BASE_KCONSOLE_HPP
   7:src/../h/kConsole.hpp **** 
   8:src/../h/kConsole.hpp **** #include "IOBuffer.hpp"
   9:src/../h/kConsole.hpp **** #include "../lib/mem.h"
  10:src/../h/kConsole.hpp **** class kConsole{
  11:src/../h/kConsole.hpp ****     static IOBuffer* input;
  12:src/../h/kConsole.hpp ****     static IOBuffer* output;
  13:src/../h/kConsole.hpp **** public:
  14:src/../h/kConsole.hpp ****     void *operator new(size_t n){ return mem_alloc(n); }
GAS LISTING /tmp/ccCh3VK6.s 			page 21


  15:src/../h/kConsole.hpp **** 
  16:src/../h/kConsole.hpp ****     void *operator new[](size_t n){ return mem_alloc(n); }
  17:src/../h/kConsole.hpp **** 
  18:src/../h/kConsole.hpp ****     void operator delete(void *p)  { mem_free(p); }
  19:src/../h/kConsole.hpp **** 
  20:src/../h/kConsole.hpp ****     void operator delete[](void *p)  { mem_free(p); }
  21:src/../h/kConsole.hpp **** 
  22:src/../h/kConsole.hpp ****     static void  init();
  23:src/../h/kConsole.hpp **** 
  24:src/../h/kConsole.hpp ****     static IOBuffer *getInput() { return input; }
  25:src/../h/kConsole.hpp **** 
  26:src/../h/kConsole.hpp ****     static IOBuffer *getOutput() { return output; }
 677              		.loc 3 26 36 is_stmt 1
 678              		.loc 3 26 43 is_stmt 0
 679 0250 97070000 		la	a5,_ZN8kConsole6outputE
 679      83B70700 
 680 0258 03B50700 		ld	a0,0(a5)
 681              	.LVL10:
 682              	.LBE164:
 683              	.LBE163:
 684              	.LBB165:
 685              	.LBB166:
 686              		.file 4 "src/../h/IOBuffer.hpp"
   1:src/../h/IOBuffer.hpp **** //
   2:src/../h/IOBuffer.hpp **** // Created by os on 5/16/24.
   3:src/../h/IOBuffer.hpp **** //
   4:src/../h/IOBuffer.hpp **** 
   5:src/../h/IOBuffer.hpp **** #ifndef PROJECT_BASE_IOBUFFER_HPP
   6:src/../h/IOBuffer.hpp **** #define PROJECT_BASE_IOBUFFER_HPP
   7:src/../h/IOBuffer.hpp **** #include "MemoryAllocator.hpp"
   8:src/../h/IOBuffer.hpp **** #include "../lib/hw.h"
   9:src/../h/IOBuffer.hpp **** #include "kSemaphore.hpp"
  10:src/../h/IOBuffer.hpp **** 
  11:src/../h/IOBuffer.hpp **** class IOBuffer{
  12:src/../h/IOBuffer.hpp **** private:
  13:src/../h/IOBuffer.hpp ****     char *buffer;
  14:src/../h/IOBuffer.hpp ****     size_t head;
  15:src/../h/IOBuffer.hpp ****     size_t tail;
  16:src/../h/IOBuffer.hpp ****     size_t size;
  17:src/../h/IOBuffer.hpp ****     kSemaphore *spaceAvailable;
  18:src/../h/IOBuffer.hpp ****     kSemaphore *itemAvailable;
  19:src/../h/IOBuffer.hpp **** public:
  20:src/../h/IOBuffer.hpp ****     IOBuffer(int capacity):head(0),tail(0),size(capacity){
  21:src/../h/IOBuffer.hpp ****         buffer = (char *)mem_alloc(capacity* sizeof(char));
  22:src/../h/IOBuffer.hpp ****         sem_open(&this->spaceAvailable,capacity);
  23:src/../h/IOBuffer.hpp ****         sem_open(&this->itemAvailable,0);
  24:src/../h/IOBuffer.hpp ****     }
  25:src/../h/IOBuffer.hpp **** 
  26:src/../h/IOBuffer.hpp ****     ~IOBuffer(){
  27:src/../h/IOBuffer.hpp ****         delete[] buffer;
  28:src/../h/IOBuffer.hpp ****     }
  29:src/../h/IOBuffer.hpp ****     void put(char c);
  30:src/../h/IOBuffer.hpp **** 
  31:src/../h/IOBuffer.hpp ****     char get();
  32:src/../h/IOBuffer.hpp **** 
  33:src/../h/IOBuffer.hpp ****     bool isFull() const { return (tail + 1) % size == head; }
  34:src/../h/IOBuffer.hpp **** 
GAS LISTING /tmp/ccCh3VK6.s 			page 22


  35:src/../h/IOBuffer.hpp ****     bool isEmpty() const { return head == tail; }
 687              		.loc 4 35 28 is_stmt 1
 688              		.loc 4 35 35 is_stmt 0
 689 025c 83378500 		ld	a5,8(a0)
 690              		.loc 4 35 43
 691 0260 03370501 		ld	a4,16(a0)
 692              	.LVL11:
 693              	.LBE166:
 694              	.LBE165:
 139:src/riscv.cpp ****                 char  c = kConsole::getOutput()->get();
 695              		.loc 1 139 55
 696 0264 630EF702 		beq	a4,a5,.L6
 697              	.LBB167:
 140:src/riscv.cpp ****                 *((uint64 *) CONSOLE_TX_DATA)= c;
 698              		.loc 1 140 17 is_stmt 1
 699              	.LBE167:
 700              	.LBE162:
 701              	.LBE161:
 702              	.LBE179:
 703              	.LBE185:
 704              	.LBE193:
 705              	.LBE202:
 706              	.LBE212:
 707              	.LBE223:
 708              	.LBE235:
 709              	.LBE248:
 710              	.LBE260:
 711              	.LBE274:
 712              	.LBE290:
 713              	.LBE306:
 714              	.LBE323:
 715              	.LBE343:
 716              	.LBE363:
 717              		.loc 3 26 36
 718              	.LBB364:
 719              	.LBB344:
 720              	.LBB324:
 721              	.LBB307:
 722              	.LBB291:
 723              	.LBB275:
 724              	.LBB261:
 725              	.LBB249:
 726              	.LBB236:
 727              	.LBB224:
 728              	.LBB213:
 729              	.LBB203:
 730              	.LBB194:
 731              	.LBB186:
 732              	.LBB180:
 733              	.LBB170:
 734              	.LBB169:
 735              	.LBB168:
 140:src/riscv.cpp ****                 *((uint64 *) CONSOLE_TX_DATA)= c;
 736              		.loc 1 140 53 is_stmt 0
 737 0268 97000000 		call	_ZN8IOBuffer3getEv@plt
 737      E7800000 
 738              	.LVL12:
GAS LISTING /tmp/ccCh3VK6.s 			page 23


 141:src/riscv.cpp ****                 status = *((char *)CONSOLE_STATUS);
 739              		.loc 1 141 17 is_stmt 1
 740 0270 97070000 		la	a5,CONSOLE_TX_DATA
 740      83B70700 
 741 0278 83B70700 		ld	a5,0(a5)
 141:src/riscv.cpp ****                 status = *((char *)CONSOLE_STATUS);
 742              		.loc 1 141 46 is_stmt 0
 743 027c 23B0A700 		sd	a0,0(a5)
 142:src/riscv.cpp ****             }
 744              		.loc 1 142 17 is_stmt 1
 142:src/riscv.cpp ****             }
 745              		.loc 1 142 26 is_stmt 0
 746 0280 83C70400 		lbu	a5,0(s1)
 142:src/riscv.cpp ****             }
 747              		.loc 1 142 24
 748 0284 A302F4F4 		sb	a5,-187(s0)
 749              	.LBE168:
 139:src/riscv.cpp ****                 char  c = kConsole::getOutput()->get();
 750              		.loc 1 139 13
 751 0288 6FF09FFB 		j	.L28
 752              	.LVL13:
 753              	.L49:
 754              	.LBE169:
 755              	.LBE170:
 756              	.LBE180:
 757              	.LBE186:
 758              	.LBE194:
 759              	.LBE203:
 760              	.LBE213:
 761              	.LBE224:
 762              	.LBE236:
 763              	.LBE249:
 764              	.LBE261:
 765              	.LBE275:
 766              	.LBE291:
 767              	.LBE307:
 768              	.LBB308:
  44:src/riscv.cpp ****             void *addr = MemoryAllocator::mem_alloc(size);
 769              		.loc 1 44 13 is_stmt 1
  44:src/riscv.cpp ****             void *addr = MemoryAllocator::mem_alloc(size);
 770              		.loc 1 44 36 is_stmt 0
 771 028c 033504FD 		ld	a0,-48(s0)
 772              	.LVL14:
  45:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(addr));
 773              		.loc 1 45 13 is_stmt 1
  45:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(addr));
 774              		.loc 1 45 52 is_stmt 0
 775 0290 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 775      E7800000 
 776              	.LVL15:
  46:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10 (fp)");
 777              		.loc 1 46 13 is_stmt 1
  46:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10 (fp)");
 778              		.loc 1 46 52 is_stmt 0
 779              	#APP
 780              	# 46 "src/riscv.cpp" 1
  47:src/riscv.cpp ****         } else if (code == 0x02){                       //mem_free
GAS LISTING /tmp/ccCh3VK6.s 			page 24


 781              		mv a0,a0
 782              	# 0 "" 2
 783              		.loc 1 47 13 is_stmt 1
  47:src/riscv.cpp ****         } else if (code == 0x02){                       //mem_free
 784              		.loc 1 47 51 is_stmt 0
 785              	# 47 "src/riscv.cpp" 1
 786              		sd a0, 8 * 10 (fp)
 787              	# 0 "" 2
 788              	.LVL16:
 789              	#NO_APP
 790              	.L6:
 791              	.LBE308:
 792              	.LBE324:
 145:src/riscv.cpp ****         w_sepc(sepc);
 793              		.loc 1 145 9 is_stmt 1
 145:src/riscv.cpp ****         w_sepc(sepc);
 794              		.loc 1 145 18 is_stmt 0
 795 02a0 833704F5 		ld	a5,-176(s0)
 796              	.LVL17:
 797              	.LBB325:
 798              	.LBB326:
 174:src/../h/riscv.hpp **** }
 175:src/../h/riscv.hpp **** 
 176:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 177:src/../h/riscv.hpp **** {
 178:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 799              		.loc 2 178 5 is_stmt 1
 800              		.loc 2 178 77 is_stmt 0
 801              	#APP
 802              	# 178 "src/../h/riscv.hpp" 1
 179              	}
 803              		csrw sstatus, a5
 804              	# 0 "" 2
 805              	.LVL18:
 806              	#NO_APP
 807              	.LBE326:
 808              	.LBE325:
 146:src/riscv.cpp ****     }
 809              		.loc 1 146 9 is_stmt 1
 146:src/riscv.cpp ****     }
 810              		.loc 1 146 15 is_stmt 0
 811 02a8 833784F4 		ld	a5,-184(s0)
 812              	.LVL19:
 813              	.LBB327:
 814              	.LBB328:
 110:src/../h/riscv.hpp **** }
 815              		.loc 2 110 5 is_stmt 1
 110:src/../h/riscv.hpp **** }
 816              		.loc 2 110 65 is_stmt 0
 817              	#APP
 818              	# 110 "src/../h/riscv.hpp" 1
 819              		csrw sepc, a5
 820              	# 0 "" 2
 821              	.LVL20:
 822              	#NO_APP
 823              	.L3:
 824              	.LBE328:
GAS LISTING /tmp/ccCh3VK6.s 			page 25


 825              	.LBE327:
 826              	.LBE344:
 827              	.LBE364:
 200:src/riscv.cpp ****     }
 201:src/riscv.cpp **** }...
 828              		.loc 1 201 1
 829 02b0 8330810B 		ld	ra,184(sp)
 830              		.cfi_remember_state
 831              		.cfi_restore 1
 832 02b4 0334010B 		ld	s0,176(sp)
 833              		.cfi_restore 8
 834              		.cfi_def_cfa 2, 192
 835 02b8 8334810A 		ld	s1,168(sp)
 836              		.cfi_restore 9
 837 02bc 0339010A 		ld	s2,160(sp)
 838              		.cfi_restore 18
 839 02c0 1301010C 		addi	sp,sp,192
 840              		.cfi_def_cfa_offset 0
 841 02c4 67800000 		jr	ra
 842              	.LVL21:
 843              	.L50:
 844              		.cfi_restore_state
 845              	.LBB365:
 846              	.LBB345:
 847              	.LBB329:
 848              	.LBB309:
 849              	.LBB292:
  49:src/riscv.cpp ****             void *addr = (void *)a1;
 850              		.loc 1 49 13 is_stmt 1
  49:src/riscv.cpp ****             void *addr = (void *)a1;
 851              		.loc 1 49 34 is_stmt 0
 852 02c8 033504FD 		ld	a0,-48(s0)
 853              	.LVL22:
  50:src/riscv.cpp ****             int status = MemoryAllocator::mem_free(addr);
 854              		.loc 1 50 13 is_stmt 1
  50:src/riscv.cpp ****             int status = MemoryAllocator::mem_free(addr);
 855              		.loc 1 50 51 is_stmt 0
 856 02cc 97000000 		call	_ZN15MemoryAllocator8mem_freeEPv@plt
 856      E7800000 
 857              	.LVL23:
  51:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(status));
 858              		.loc 1 51 13 is_stmt 1
  51:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(status));
 859              		.loc 1 51 54 is_stmt 0
 860              	#APP
 861              	# 51 "src/riscv.cpp" 1
  52:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
 862              		mv a0,a0
 863              	# 0 "" 2
 864              		.loc 1 52 13 is_stmt 1
  52:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
 865              		.loc 1 52 50 is_stmt 0
 866              	# 52 "src/riscv.cpp" 1
 867              		sd a0, 8 * 10(fp)
 868              	# 0 "" 2
 869              	#NO_APP
 870              	.LBE292:
GAS LISTING /tmp/ccCh3VK6.s 			page 26


 871 02dc 6FF05FFC 		j	.L6
 872              	.LVL24:
 873              	.L51:
 874              	.LBB293:
 875              	.LBB276:
  54:src/riscv.cpp ****             TCB **thread = (TCB**) a1;
 876              		.loc 1 54 13 is_stmt 1
  54:src/riscv.cpp ****             TCB **thread = (TCB**) a1;
 877              		.loc 1 54 36 is_stmt 0
 878 02e0 833404FD 		ld	s1,-48(s0)
 879              	.LVL25:
  55:src/riscv.cpp ****             Body body = (Body) a2;
 880              		.loc 1 55 13 is_stmt 1
  55:src/riscv.cpp ****             Body body = (Body) a2;
 881              		.loc 1 55 32 is_stmt 0
 882 02e4 033584FC 		ld	a0,-56(s0)
 883              	.LVL26:
  56:src/riscv.cpp ****             void *arg = (void *) a3;
 884              		.loc 1 56 13 is_stmt 1
  56:src/riscv.cpp ****             void *arg = (void *) a3;
 885              		.loc 1 56 34 is_stmt 0
 886 02e8 033604FC 		ld	a2,-64(s0)
 887              	.LVL27:
  57:src/riscv.cpp ****             uint64 *stack = (uint64 *) a4;
 888              		.loc 1 57 13 is_stmt 1
  57:src/riscv.cpp ****             uint64 *stack = (uint64 *) a4;
 889              		.loc 1 57 40 is_stmt 0
 890 02ec 833584FB 		ld	a1,-72(s0)
 891              	.LVL28:
  58:src/riscv.cpp ****             int status = 0;
 892              		.loc 1 58 13 is_stmt 1
  59:src/riscv.cpp ****             *thread = (TCB::createThread(body,stack,arg));
 893              		.loc 1 59 13
  59:src/riscv.cpp ****             *thread = (TCB::createThread(body,stack,arg));
 894              		.loc 1 59 41 is_stmt 0
 895 02f0 97000000 		call	_ZN3TCB12createThreadEPFvPvEPmS0_@plt
 895      E7800000 
 896              	.LVL29:
  59:src/riscv.cpp ****             *thread = (TCB::createThread(body,stack,arg));
 897              		.loc 1 59 21
 898 02f8 23B0A400 		sd	a0,0(s1)
  60:src/riscv.cpp ****             if(*thread == nullptr) status = -1;
 899              		.loc 1 60 13 is_stmt 1
 900 02fc 630A0500 		beqz	a0,.L38
  58:src/riscv.cpp ****             int status = 0;
 901              		.loc 1 58 17 is_stmt 0
 902 0300 93070000 		li	a5,0
 903              	.L9:
 904              	.LVL30:
  61:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(status));
 905              		.loc 1 61 13 is_stmt 1
  61:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(status));
 906              		.loc 1 61 54 is_stmt 0
 907              	#APP
 908              	# 61 "src/riscv.cpp" 1
  62:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
 909              		mv a0,a5
GAS LISTING /tmp/ccCh3VK6.s 			page 27


 910              	# 0 "" 2
 911              		.loc 1 62 13 is_stmt 1
  62:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
 912              		.loc 1 62 50 is_stmt 0
 913              	# 62 "src/riscv.cpp" 1
 914              		sd a0, 8 * 10(fp)
 915              	# 0 "" 2
 916              	#NO_APP
 917              	.LBE276:
 918 030c 6FF05FF9 		j	.L6
 919              	.LVL31:
 920              	.L38:
 921              	.LBB277:
  60:src/riscv.cpp ****             if(*thread == nullptr) status = -1;
 922              		.loc 1 60 43
 923 0310 9307F0FF 		li	a5,-1
 924 0314 6FF01FFF 		j	.L9
 925              	.LVL32:
 926              	.L52:
 927              	.LBE277:
 928              	.LBB278:
 929              	.LBB262:
  64:src/riscv.cpp ****             int status = TCB::exit();
 930              		.loc 1 64 13 is_stmt 1
  64:src/riscv.cpp ****             int status = TCB::exit();
 931              		.loc 1 64 35 is_stmt 0
 932 0318 97000000 		call	_ZN3TCB4exitEv@plt
 932      E7800000 
 933              	.LVL33:
  65:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(status));
 934              		.loc 1 65 13 is_stmt 1
  65:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(status));
 935              		.loc 1 65 54 is_stmt 0
 936              	#APP
 937              	# 65 "src/riscv.cpp" 1
  66:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
 938              		mv a0,a0
 939              	# 0 "" 2
 940              		.loc 1 66 13 is_stmt 1
  66:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
 941              		.loc 1 66 50 is_stmt 0
 942              	# 66 "src/riscv.cpp" 1
 943              		sd a0, 8 * 10(fp)
 944              	# 0 "" 2
 945              	#NO_APP
 946              	.LBE262:
 947 0328 6FF09FF7 		j	.L6
 948              	.LVL34:
 949              	.L53:
 950              	.LBB263:
  69:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 951              		.loc 1 69 13 is_stmt 1
  69:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 952              		.loc 1 69 35 is_stmt 0
 953 032c 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 953      83B70700 
 954 0334 23B00700 		sd	zero,0(a5)
GAS LISTING /tmp/ccCh3VK6.s 			page 28


  70:src/riscv.cpp ****             TCB::dispatch();
 955              		.loc 1 70 13 is_stmt 1
  70:src/riscv.cpp ****             TCB::dispatch();
 956              		.loc 1 70 26 is_stmt 0
 957 0338 97000000 		call	_ZN3TCB8dispatchEv@plt
 957      E7800000 
 958              	.LVL35:
 959 0340 6FF01FF6 		j	.L6
 960              	.LVL36:
 961              	.L54:
 962              	.LBB250:
 963              	.LBB237:
  72:src/riscv.cpp ****             kSemaphore **sem = (kSemaphore**) a1;
 964              		.loc 1 72 13 is_stmt 1
  72:src/riscv.cpp ****             kSemaphore **sem = (kSemaphore**) a1;
 965              		.loc 1 72 47 is_stmt 0
 966 0344 833404FD 		ld	s1,-48(s0)
 967              	.LVL37:
  73:src/riscv.cpp ****             int val = (int)  a2;
 968              		.loc 1 73 13 is_stmt 1
  73:src/riscv.cpp ****             int val = (int)  a2;
 969              		.loc 1 73 30 is_stmt 0
 970 0348 033584FC 		ld	a0,-56(s0)
 971              	.LVL38:
  74:src/riscv.cpp ****             *sem = kSemaphore::create_sem(val);
 972              		.loc 1 74 13 is_stmt 1
  74:src/riscv.cpp ****             *sem = kSemaphore::create_sem(val);
 973              		.loc 1 74 42 is_stmt 0
 974 034c 1B050500 		sext.w	a0,a0
 975 0350 97000000 		call	_ZN10kSemaphore10create_semEm@plt
 975      E7800000 
 976              	.LVL39:
  74:src/riscv.cpp ****             *sem = kSemaphore::create_sem(val);
 977              		.loc 1 74 18
 978 0358 23B0A400 		sd	a0,0(s1)
  75:src/riscv.cpp ****             int status = 0;
 979              		.loc 1 75 13 is_stmt 1
 980              	.LVL40:
  76:src/riscv.cpp ****             if(*sem == nullptr) status = -1;
 981              		.loc 1 76 13
 982 035c 630A0500 		beqz	a0,.L39
  75:src/riscv.cpp ****             int status = 0;
 983              		.loc 1 75 17 is_stmt 0
 984 0360 93070000 		li	a5,0
 985              	.L13:
 986              	.LVL41:
  77:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(status));
 987              		.loc 1 77 13 is_stmt 1
  77:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(status));
 988              		.loc 1 77 54 is_stmt 0
 989              	#APP
 990              	# 77 "src/riscv.cpp" 1
  78:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
 991              		mv a0,a5
 992              	# 0 "" 2
 993              		.loc 1 78 13 is_stmt 1
  78:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
GAS LISTING /tmp/ccCh3VK6.s 			page 29


 994              		.loc 1 78 50 is_stmt 0
 995              	# 78 "src/riscv.cpp" 1
 996              		sd a0, 8 * 10(fp)
 997              	# 0 "" 2
 998              	#NO_APP
 999              	.LBE237:
 1000 036c 6FF05FF3 		j	.L6
 1001              	.LVL42:
 1002              	.L39:
 1003              	.LBB238:
  76:src/riscv.cpp ****             if(*sem == nullptr) status = -1;
 1004              		.loc 1 76 40
 1005 0370 9307F0FF 		li	a5,-1
 1006 0374 6FF01FFF 		j	.L13
 1007              	.LVL43:
 1008              	.L55:
 1009              	.LBE238:
 1010              	.LBB239:
 1011              	.LBB225:
  80:src/riscv.cpp ****             kSemaphore *sem = (kSemaphore*) a1;
 1012              		.loc 1 80 13 is_stmt 1
  80:src/riscv.cpp ****             kSemaphore *sem = (kSemaphore*) a1;
 1013              		.loc 1 80 45 is_stmt 0
 1014 0378 033504FD 		ld	a0,-48(s0)
 1015              	.LVL44:
  81:src/riscv.cpp ****             int status = 0;
 1016              		.loc 1 81 13 is_stmt 1
  82:src/riscv.cpp ****             if(sem == nullptr) status = -1;
 1017              		.loc 1 82 13
 1018 037c 631A0500 		bnez	a0,.L62
  82:src/riscv.cpp ****             if(sem == nullptr) status = -1;
 1019              		.loc 1 82 39 is_stmt 0
 1020 0380 9307F0FF 		li	a5,-1
 1021              	.LVL45:
 1022              	.L15:
  84:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(status));
 1023              		.loc 1 84 13 is_stmt 1
  84:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(status));
 1024              		.loc 1 84 54 is_stmt 0
 1025              	#APP
 1026              	# 84 "src/riscv.cpp" 1
  85:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
 1027              		mv a0,a5
 1028              	# 0 "" 2
 1029              		.loc 1 85 13 is_stmt 1
  85:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
 1030              		.loc 1 85 50 is_stmt 0
 1031              	# 85 "src/riscv.cpp" 1
 1032              		sd a0, 8 * 10(fp)
 1033              	# 0 "" 2
 1034              	#NO_APP
 1035              	.LBE225:
 1036 038c 6FF05FF1 		j	.L6
 1037              	.LVL46:
 1038              	.L62:
 1039              	.LBB226:
  83:src/riscv.cpp ****             else status = sem->close();
GAS LISTING /tmp/ccCh3VK6.s 			page 30


 1040              		.loc 1 83 18 is_stmt 1
  83:src/riscv.cpp ****             else status = sem->close();
 1041              		.loc 1 83 37 is_stmt 0
 1042 0390 97000000 		call	_ZN10kSemaphore5closeEv@plt
 1042      E7800000 
 1043              	.LVL47:
 1044 0398 93070500 		mv	a5,a0
 1045              	.LVL48:
 1046 039c 6FF09FFE 		j	.L15
 1047              	.LVL49:
 1048              	.L56:
 1049              	.LBE226:
 1050              	.LBB227:
 1051              	.LBB214:
  87:src/riscv.cpp ****             kSemaphore *sem = (kSemaphore*) a1;
 1052              		.loc 1 87 13 is_stmt 1
  87:src/riscv.cpp ****             kSemaphore *sem = (kSemaphore*) a1;
 1053              		.loc 1 87 45 is_stmt 0
 1054 03a0 033504FD 		ld	a0,-48(s0)
 1055              	.LVL50:
  88:src/riscv.cpp ****             int status = 0;
 1056              		.loc 1 88 13 is_stmt 1
  89:src/riscv.cpp ****             if(sem == nullptr) status = -1;
 1057              		.loc 1 89 13
 1058 03a4 631A0500 		bnez	a0,.L63
  89:src/riscv.cpp ****             if(sem == nullptr) status = -1;
 1059              		.loc 1 89 39 is_stmt 0
 1060 03a8 9307F0FF 		li	a5,-1
 1061              	.LVL51:
 1062              	.L17:
  91:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(status));
 1063              		.loc 1 91 13 is_stmt 1
  91:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(status));
 1064              		.loc 1 91 54 is_stmt 0
 1065              	#APP
 1066              	# 91 "src/riscv.cpp" 1
  92:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
 1067              		mv a0,a5
 1068              	# 0 "" 2
 1069              		.loc 1 92 13 is_stmt 1
  92:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
 1070              		.loc 1 92 50 is_stmt 0
 1071              	# 92 "src/riscv.cpp" 1
 1072              		sd a0, 8 * 10(fp)
 1073              	# 0 "" 2
 1074              	#NO_APP
 1075              	.LBE214:
 1076 03b4 6FF0DFEE 		j	.L6
 1077              	.LVL52:
 1078              	.L63:
 1079              	.LBB215:
  90:src/riscv.cpp ****             else status = sem->wait();
 1080              		.loc 1 90 18 is_stmt 1
  90:src/riscv.cpp ****             else status = sem->wait();
 1081              		.loc 1 90 36 is_stmt 0
 1082 03b8 97000000 		call	_ZN10kSemaphore4waitEv@plt
 1082      E7800000 
GAS LISTING /tmp/ccCh3VK6.s 			page 31


 1083              	.LVL53:
 1084 03c0 93070500 		mv	a5,a0
 1085              	.LVL54:
 1086 03c4 6FF09FFE 		j	.L17
 1087              	.LVL55:
 1088              	.L57:
 1089              	.LBE215:
 1090              	.LBB216:
 1091              	.LBB204:
  94:src/riscv.cpp ****             kSemaphore *sem = (kSemaphore*) a1;
 1092              		.loc 1 94 13 is_stmt 1
  94:src/riscv.cpp ****             kSemaphore *sem = (kSemaphore*) a1;
 1093              		.loc 1 94 45 is_stmt 0
 1094 03c8 033504FD 		ld	a0,-48(s0)
 1095              	.LVL56:
  95:src/riscv.cpp ****             int status = 0;
 1096              		.loc 1 95 13 is_stmt 1
  96:src/riscv.cpp ****             if(sem == nullptr) status = -1;
 1097              		.loc 1 96 13
 1098 03cc 631A0500 		bnez	a0,.L64
  96:src/riscv.cpp ****             if(sem == nullptr) status = -1;
 1099              		.loc 1 96 39 is_stmt 0
 1100 03d0 9307F0FF 		li	a5,-1
 1101              	.LVL57:
 1102              	.L19:
  98:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(status));
 1103              		.loc 1 98 13 is_stmt 1
  98:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(status));
 1104              		.loc 1 98 54 is_stmt 0
 1105              	#APP
 1106              	# 98 "src/riscv.cpp" 1
  99:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
 1107              		mv a0,a5
 1108              	# 0 "" 2
 1109              		.loc 1 99 13 is_stmt 1
  99:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
 1110              		.loc 1 99 50 is_stmt 0
 1111              	# 99 "src/riscv.cpp" 1
 1112              		sd a0, 8 * 10(fp)
 1113              	# 0 "" 2
 1114              	#NO_APP
 1115              	.LBE204:
 1116 03dc 6FF05FEC 		j	.L6
 1117              	.LVL58:
 1118              	.L64:
 1119              	.LBB205:
  97:src/riscv.cpp ****             else status = sem->signal();
 1120              		.loc 1 97 18 is_stmt 1
  97:src/riscv.cpp ****             else status = sem->signal();
 1121              		.loc 1 97 38 is_stmt 0
 1122 03e0 97000000 		call	_ZN10kSemaphore6signalEv@plt
 1122      E7800000 
 1123              	.LVL59:
 1124 03e8 93070500 		mv	a5,a0
 1125              	.LVL60:
 1126 03ec 6FF09FFE 		j	.L19
 1127              	.LVL61:
GAS LISTING /tmp/ccCh3VK6.s 			page 32


 1128              	.L58:
 1129              	.LBE205:
 1130              	.LBB206:
 1131              	.LBB195:
 101:src/riscv.cpp ****             kSemaphore *sem = (kSemaphore*)a1;
 1132              		.loc 1 101 13 is_stmt 1
 101:src/riscv.cpp ****             kSemaphore *sem = (kSemaphore*)a1;
 1133              		.loc 1 101 44 is_stmt 0
 1134 03f0 033504FD 		ld	a0,-48(s0)
 1135              	.LVL62:
 102:src/riscv.cpp ****             time_t t = (time_t) a2;
 1136              		.loc 1 102 13 is_stmt 1
 102:src/riscv.cpp ****             time_t t = (time_t) a2;
 1137              		.loc 1 102 33 is_stmt 0
 1138 03f4 833584FC 		ld	a1,-56(s0)
 1139              	.LVL63:
 103:src/riscv.cpp ****             int status = 0;
 1140              		.loc 1 103 13 is_stmt 1
 104:src/riscv.cpp ****             if(sem == nullptr) status = -1;
 1141              		.loc 1 104 13
 1142 03f8 631A0500 		bnez	a0,.L65
 104:src/riscv.cpp ****             if(sem == nullptr) status = -1;
 1143              		.loc 1 104 39 is_stmt 0
 1144 03fc 9307F0FF 		li	a5,-1
 1145              	.LVL64:
 1146              	.L21:
 106:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(status));
 1147              		.loc 1 106 13 is_stmt 1
 106:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(status));
 1148              		.loc 1 106 54 is_stmt 0
 1149              	#APP
 1150              	# 106 "src/riscv.cpp" 1
 107:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
 1151              		mv a0,a5
 1152              	# 0 "" 2
 1153              		.loc 1 107 13 is_stmt 1
 107:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
 1154              		.loc 1 107 50 is_stmt 0
 1155              	# 107 "src/riscv.cpp" 1
 1156              		sd a0, 8 * 10(fp)
 1157              	# 0 "" 2
 1158              	#NO_APP
 1159              	.LBE195:
 1160 0408 6FF09FE9 		j	.L6
 1161              	.LVL65:
 1162              	.L65:
 1163              	.LBB196:
 105:src/riscv.cpp ****             else status = sem->timedWait(t);
 1164              		.loc 1 105 18 is_stmt 1
 105:src/riscv.cpp ****             else status = sem->timedWait(t);
 1165              		.loc 1 105 41 is_stmt 0
 1166 040c 97000000 		call	_ZN10kSemaphore9timedWaitEm@plt
 1166      E7800000 
 1167              	.LVL66:
 1168 0414 93070500 		mv	a5,a0
 1169              	.LVL67:
 1170 0418 6FF09FFE 		j	.L21
GAS LISTING /tmp/ccCh3VK6.s 			page 33


 1171              	.LVL68:
 1172              	.L59:
 1173              	.LBE196:
 1174              	.LBB197:
 1175              	.LBB187:
 109:src/riscv.cpp ****             kSemaphore *sem = (kSemaphore*) a1;
 1176              		.loc 1 109 13 is_stmt 1
 109:src/riscv.cpp ****             kSemaphore *sem = (kSemaphore*) a1;
 1177              		.loc 1 109 45 is_stmt 0
 1178 041c 033504FD 		ld	a0,-48(s0)
 1179              	.LVL69:
 110:src/riscv.cpp ****             int status = 0;
 1180              		.loc 1 110 13 is_stmt 1
 111:src/riscv.cpp ****             if(sem == nullptr) status = -1;
 1181              		.loc 1 111 13
 1182 0420 631A0500 		bnez	a0,.L66
 111:src/riscv.cpp ****             if(sem == nullptr) status = -1;
 1183              		.loc 1 111 39 is_stmt 0
 1184 0424 9307F0FF 		li	a5,-1
 1185              	.LVL70:
 1186              	.L23:
 113:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(status));
 1187              		.loc 1 113 13 is_stmt 1
 113:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(status));
 1188              		.loc 1 113 54 is_stmt 0
 1189              	#APP
 1190              	# 113 "src/riscv.cpp" 1
 114:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
 1191              		mv a0,a5
 1192              	# 0 "" 2
 1193              		.loc 1 114 13 is_stmt 1
 114:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
 1194              		.loc 1 114 50 is_stmt 0
 1195              	# 114 "src/riscv.cpp" 1
 1196              		sd a0, 8 * 10(fp)
 1197              	# 0 "" 2
 1198              	#NO_APP
 1199              	.LBE187:
 1200 0430 6FF01FE7 		j	.L6
 1201              	.LVL71:
 1202              	.L66:
 1203              	.LBB188:
 112:src/riscv.cpp ****             else status = sem->trywait();
 1204              		.loc 1 112 18 is_stmt 1
 112:src/riscv.cpp ****             else status = sem->trywait();
 1205              		.loc 1 112 39 is_stmt 0
 1206 0434 97000000 		call	_ZN10kSemaphore7trywaitEv@plt
 1206      E7800000 
 1207              	.LVL72:
 1208 043c 93070500 		mv	a5,a0
 1209              	.LVL73:
 1210 0440 6FF09FFE 		j	.L23
 1211              	.LVL74:
 1212              	.L60:
 1213              	.LBE188:
 1214              	.LBB189:
 1215              	.LBB181:
GAS LISTING /tmp/ccCh3VK6.s 			page 34


 117:src/riscv.cpp ****             uint64 time = a1;
 1216              		.loc 1 117 13 is_stmt 1
 117:src/riscv.cpp ****             uint64 time = a1;
 1217              		.loc 1 117 27 is_stmt 0
 1218 0444 033504FD 		ld	a0,-48(s0)
 1219              	.LVL75:
 118:src/riscv.cpp ****             int status = TCB::sleep(time);
 1220              		.loc 1 118 13 is_stmt 1
 118:src/riscv.cpp ****             int status = TCB::sleep(time);
 1221              		.loc 1 118 36 is_stmt 0
 1222 0448 97000000 		call	_ZN3TCB5sleepEm@plt
 1222      E7800000 
 1223              	.LVL76:
 119:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(status));
 1224              		.loc 1 119 13 is_stmt 1
 119:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(status));
 1225              		.loc 1 119 54 is_stmt 0
 1226              	#APP
 1227              	# 119 "src/riscv.cpp" 1
 120:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
 1228              		mv a0,a0
 1229              	# 0 "" 2
 1230              		.loc 1 120 13 is_stmt 1
 120:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
 1231              		.loc 1 120 50 is_stmt 0
 1232              	# 120 "src/riscv.cpp" 1
 1233              		sd a0, 8 * 10(fp)
 1234              	# 0 "" 2
 1235              	#NO_APP
 1236              	.LBE181:
 1237 0458 6FF09FE4 		j	.L6
 1238              	.LVL77:
 1239              	.L61:
 1240              	.LBB182:
 1241              	.LBB171:
 123:src/riscv.cpp ****             char volatile status = *((char *)CONSOLE_STATUS);
 1242              		.loc 1 123 13 is_stmt 1
 123:src/riscv.cpp ****             char volatile status = *((char *)CONSOLE_STATUS);
 1243              		.loc 1 123 36 is_stmt 0
 1244 045c 97070000 		la	a5,CONSOLE_STATUS
 1244      83B70700 
 1245 0464 83B40700 		ld	s1,0(a5)
 1246 0468 83C70400 		lbu	a5,0(s1)
 123:src/riscv.cpp ****             char volatile status = *((char *)CONSOLE_STATUS);
 1247              		.loc 1 123 27
 1248 046c A300F4F4 		sb	a5,-191(s0)
 1249              	.LVL78:
 1250              	.L27:
 124:src/riscv.cpp ****             while( (CONSOLE_RX_STATUS_BIT & status) && !kConsole::getInput()->isFull()){
 1251              		.loc 1 124 13 is_stmt 1
 124:src/riscv.cpp ****             while( (CONSOLE_RX_STATUS_BIT & status) && !kConsole::getInput()->isFull()){
 1252              		.loc 1 124 53
 124:src/riscv.cpp ****             while( (CONSOLE_RX_STATUS_BIT & status) && !kConsole::getInput()->isFull()){
 1253              		.loc 1 124 45 is_stmt 0
 1254 0470 834714F4 		lbu	a5,-191(s0)
 124:src/riscv.cpp ****             while( (CONSOLE_RX_STATUS_BIT & status) && !kConsole::getInput()->isFull()){
 1255              		.loc 1 124 53
GAS LISTING /tmp/ccCh3VK6.s 			page 35


 1256 0474 93F71700 		andi	a5,a5,1
 1257 0478 63800706 		beqz	a5,.L26
 1258              	.LBB172:
 1259              	.LBB173:
  24:src/../h/kConsole.hpp **** 
 1260              		.loc 3 24 35 is_stmt 1
  24:src/../h/kConsole.hpp **** 
 1261              		.loc 3 24 42 is_stmt 0
 1262 047c 97070000 		la	a5,_ZN8kConsole5inputE
 1262      83B70700 
 1263 0484 03B50700 		ld	a0,0(a5)
 1264              	.LVL79:
 1265              	.LBE173:
 1266              	.LBE172:
 1267              	.LBB174:
 1268              	.LBB175:
  33:src/../h/IOBuffer.hpp **** 
 1269              		.loc 4 33 27 is_stmt 1
  33:src/../h/IOBuffer.hpp **** 
 1270              		.loc 4 33 35 is_stmt 0
 1271 0488 83370501 		ld	a5,16(a0)
  33:src/../h/IOBuffer.hpp **** 
 1272              		.loc 4 33 40
 1273 048c 93871700 		addi	a5,a5,1
  33:src/../h/IOBuffer.hpp **** 
 1274              		.loc 4 33 47
 1275 0490 03378501 		ld	a4,24(a0)
  33:src/../h/IOBuffer.hpp **** 
 1276              		.loc 4 33 45
 1277 0494 B3F7E702 		remu	a5,a5,a4
  33:src/../h/IOBuffer.hpp **** 
 1278              		.loc 4 33 55
 1279 0498 03378500 		ld	a4,8(a0)
 1280              	.LVL80:
 1281              	.LBE175:
 1282              	.LBE174:
 124:src/riscv.cpp ****             while( (CONSOLE_RX_STATUS_BIT & status) && !kConsole::getInput()->isFull()){
 1283              		.loc 1 124 53
 1284 049c 638EE702 		beq	a5,a4,.L26
 1285              	.LBB176:
 125:src/riscv.cpp ****                 char* volatile rx = (char *)CONSOLE_RX_DATA;
 1286              		.loc 1 125 17 is_stmt 1
 125:src/riscv.cpp ****                 char* volatile rx = (char *)CONSOLE_RX_DATA;
 1287              		.loc 1 125 32 is_stmt 0
 1288 04a0 97070000 		la	a5,CONSOLE_RX_DATA
 1288      83B70700 
 1289 04a8 83B70700 		ld	a5,0(a5)
 1290 04ac 233CF4F4 		sd	a5,-168(s0)
 126:src/riscv.cpp ****                 char volatile c = *rx;
 1291              		.loc 1 126 17 is_stmt 1
 126:src/riscv.cpp ****                 char volatile c = *rx;
 1292              		.loc 1 126 36 is_stmt 0
 1293 04b0 833784F5 		ld	a5,-168(s0)
 126:src/riscv.cpp ****                 char volatile c = *rx;
 1294              		.loc 1 126 35
 1295 04b4 83C70700 		lbu	a5,0(a5)
 126:src/riscv.cpp ****                 char volatile c = *rx;
GAS LISTING /tmp/ccCh3VK6.s 			page 36


 1296              		.loc 1 126 36
 1297 04b8 2301F4F4 		sb	a5,-190(s0)
 128:src/riscv.cpp ****                 kConsole::getInput()->put(c);
 1298              		.loc 1 128 17 is_stmt 1
 1299              	.LBE176:
 1300              	.LBE171:
 1301              	.LBE182:
 1302              	.LBE189:
 1303              	.LBE197:
 1304              	.LBE206:
 1305              	.LBE216:
 1306              	.LBE227:
 1307              	.LBE239:
 1308              	.LBE250:
 1309              	.LBE263:
 1310              	.LBE278:
 1311              	.LBE293:
 1312              	.LBE309:
 1313              	.LBE329:
 1314              	.LBE345:
 1315              	.LBE365:
  24:src/../h/kConsole.hpp **** 
 1316              		.loc 3 24 35
 1317              	.LBB366:
 1318              	.LBB346:
 1319              	.LBB330:
 1320              	.LBB310:
 1321              	.LBB294:
 1322              	.LBB279:
 1323              	.LBB264:
 1324              	.LBB251:
 1325              	.LBB240:
 1326              	.LBB228:
 1327              	.LBB217:
 1328              	.LBB207:
 1329              	.LBB198:
 1330              	.LBB190:
 1331              	.LBB183:
 1332              	.LBB178:
 1333              	.LBB177:
 128:src/riscv.cpp ****                 kConsole::getInput()->put(c);
 1334              		.loc 1 128 42 is_stmt 0
 1335 04bc 834524F4 		lbu	a1,-190(s0)
 1336 04c0 93F5F50F 		andi	a1,a1,0xff
 1337 04c4 97000000 		call	_ZN8IOBuffer3putEc@plt
 1337      E7800000 
 1338              	.LVL81:
 129:src/riscv.cpp ****                 status = *((char *)CONSOLE_STATUS);
 1339              		.loc 1 129 17 is_stmt 1
 129:src/riscv.cpp ****                 status = *((char *)CONSOLE_STATUS);
 1340              		.loc 1 129 26 is_stmt 0
 1341 04cc 83C70400 		lbu	a5,0(s1)
 129:src/riscv.cpp ****                 status = *((char *)CONSOLE_STATUS);
 1342              		.loc 1 129 24
 1343 04d0 A300F4F4 		sb	a5,-191(s0)
 1344              	.LBE177:
 124:src/riscv.cpp ****             while( (CONSOLE_RX_STATUS_BIT & status) && !kConsole::getInput()->isFull()){
GAS LISTING /tmp/ccCh3VK6.s 			page 37


 1345              		.loc 1 124 13
 1346 04d4 6FF0DFF9 		j	.L27
 1347              	.L26:
 131:src/riscv.cpp ****             char volatile c = kConsole::getc();
 1348              		.loc 1 131 13 is_stmt 1 discriminator 4
 131:src/riscv.cpp ****             char volatile c = kConsole::getc();
 1349              		.loc 1 131 45 is_stmt 0 discriminator 4
 1350 04d8 97000000 		call	_ZN8kConsole4getcEv@plt
 1350      E7800000 
 1351              	.LVL82:
 131:src/riscv.cpp ****             char volatile c = kConsole::getc();
 1352              		.loc 1 131 46 discriminator 4
 1353 04e0 A301A4F4 		sb	a0,-189(s0)
 132:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(c));
 1354              		.loc 1 132 13 is_stmt 1 discriminator 4
 132:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(c));
 1355              		.loc 1 132 46 is_stmt 0 discriminator 4
 1356 04e4 834734F4 		lbu	a5,-189(s0)
 132:src/riscv.cpp ****             __asm__ volatile("mv a0,%0"::"r"(c));
 1357              		.loc 1 132 49 discriminator 4
 1358              	#APP
 1359              	# 132 "src/riscv.cpp" 1
 133:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
 1360              		mv a0,a5
 1361              	# 0 "" 2
 1362              		.loc 1 133 13 is_stmt 1 discriminator 4
 133:src/riscv.cpp ****             __asm__ volatile("sd a0, 8 * 10(fp)");
 1363              		.loc 1 133 50 is_stmt 0 discriminator 4
 1364              	# 133 "src/riscv.cpp" 1
 1365              		sd a0, 8 * 10(fp)
 1366              	# 0 "" 2
 1367              	#NO_APP
 1368              	.LBE178:
 1369 04f0 6FF01FDB 		j	.L6
 1370              	.LVL83:
 1371              	.L47:
 1372              	.LBE183:
 1373              	.LBE190:
 1374              	.LBE198:
 1375              	.LBE207:
 1376              	.LBE217:
 1377              	.LBE228:
 1378              	.LBE240:
 1379              	.LBE251:
 1380              	.LBE264:
 1381              	.LBE279:
 1382              	.LBE294:
 1383              	.LBE310:
 1384              	.LBE330:
 1385              	.LBE346:
 1386              	.LBB347:
 1387              	.LBB125:
 152:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 1388              		.loc 1 152 9 is_stmt 1
 1389              	.LBB126:
 1390              	.LBB127:
 144:src/../h/riscv.hpp **** }
GAS LISTING /tmp/ccCh3VK6.s 			page 38


 1391              		.loc 2 144 5
 144:src/../h/riscv.hpp **** }
 1392              		.loc 2 144 64 is_stmt 0
 1393 04f4 93072000 		li	a5,2
 1394              	#APP
 1395              	# 144 "src/../h/riscv.hpp" 1
 1396              		csrc sip, a5
 1397              	# 0 "" 2
 1398              	.LVL84:
 1399              	#NO_APP
 1400              	.LBE127:
 1401              	.LBE126:
 153:src/riscv.cpp ****         TCB::wake(); // skloni i iz wait timer dodaj bool
 1402              		.loc 1 153 9 is_stmt 1
 153:src/riscv.cpp ****         TCB::wake(); // skloni i iz wait timer dodaj bool
 1403              		.loc 1 153 18 is_stmt 0
 1404 04fc 97000000 		call	_ZN3TCB4wakeEv@plt
 1404      E7800000 
 1405              	.LVL85:
 154:src/riscv.cpp ****         kSemaphore::getWaitTimer();
 1406              		.loc 1 154 9 is_stmt 1
 154:src/riscv.cpp ****         kSemaphore::getWaitTimer();
 1407              		.loc 1 154 33 is_stmt 0
 1408 0504 97000000 		call	_ZN10kSemaphore12getWaitTimerEv@plt
 1408      E7800000 
 1409              	.LVL86:
 155:src/riscv.cpp ****         TCB::timeSliceCounter++;
 1410              		.loc 1 155 9 is_stmt 1
 155:src/riscv.cpp ****         TCB::timeSliceCounter++;
 1411              		.loc 1 155 30 is_stmt 0
 1412 050c 17070000 		la	a4,_ZN3TCB16timeSliceCounterE
 1412      03370700 
 1413 0514 83370700 		ld	a5,0(a4)
 1414 0518 93871700 		addi	a5,a5,1
 1415 051c 2330F700 		sd	a5,0(a4)
 156:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 1416              		.loc 1 156 9 is_stmt 1
 1417              	.LBB128:
 156:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 1418              		.loc 1 156 64 is_stmt 0
 1419 0520 17070000 		la	a4,_ZN3TCB7runningE
 1419      03370700 
 1420 0528 03370700 		ld	a4,0(a4)
 1421              	.LVL87:
 1422              	.LBB129:
 1423              	.LBB130:
 1424              		.file 5 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by marko on 20.4.22..
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   6:src/../h/tcb.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   7:src/../h/tcb.hpp **** 
   8:src/../h/tcb.hpp **** #include "../lib/hw.h"
   9:src/../h/tcb.hpp **** #include "Scheduler.hpp"
  10:src/../h/tcb.hpp **** #include "../h/riscv.hpp"
GAS LISTING /tmp/ccCh3VK6.s 			page 39


  11:src/../h/tcb.hpp **** #include "../h/syscall_c.hpp"
  12:src/../h/tcb.hpp **** #include "../lib/mem.h"
  13:src/../h/tcb.hpp **** 
  14:src/../h/tcb.hpp **** class kSemaphore;
  15:src/../h/tcb.hpp **** 
  16:src/../h/tcb.hpp **** typedef unsigned long time_t;
  17:src/../h/tcb.hpp **** class TCB
  18:src/../h/tcb.hpp **** {
  19:src/../h/tcb.hpp **** public:
  20:src/../h/tcb.hpp ****     ~TCB() { mem_free(stack); }
  21:src/../h/tcb.hpp **** 
  22:src/../h/tcb.hpp ****     bool isFinished() const { return finished; }
  23:src/../h/tcb.hpp **** 
  24:src/../h/tcb.hpp ****     void setFinished(bool value) { finished = value; }
  25:src/../h/tcb.hpp **** 
  26:src/../h/tcb.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
 1425              		.loc 5 26 35 is_stmt 1
 1426              		.loc 5 26 42 is_stmt 0
 1427 052c 03370702 		ld	a4,32(a4)
 1428              	.LVL88:
 1429              	.LBE130:
 1430              	.LBE129:
 156:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 1431              		.loc 1 156 9
 1432 0530 E3E0E7D8 		bltu	a5,a4,.L3
 1433              	.LBB131:
 158:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 1434              		.loc 1 158 13 is_stmt 1
 1435              	.LBB132:
 1436              	.LBB133:
 103:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 1437              		.loc 2 103 5
 104:src/../h/riscv.hpp ****     return sepc;
 1438              		.loc 2 104 5
 104:src/../h/riscv.hpp ****     return sepc;
 1439              		.loc 2 104 64 is_stmt 0
 1440              	#APP
 1441              	# 104 "src/../h/riscv.hpp" 1
 1442              		csrr a5, sepc
 1443              	# 0 "" 2
 1444              	#NO_APP
 1445 0538 233CF4F8 		sd	a5,-104(s0)
 105:src/../h/riscv.hpp **** }
 1446              		.loc 2 105 5 is_stmt 1
 105:src/../h/riscv.hpp **** }
 1447              		.loc 2 105 12 is_stmt 0
 1448 053c 833784F9 		ld	a5,-104(s0)
 1449              	.LBE133:
 1450              	.LBE132:
 158:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 1451              		.loc 1 158 43
 1452 0540 2330F4F6 		sd	a5,-160(s0)
 159:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 1453              		.loc 1 159 13 is_stmt 1
 1454              	.LBB134:
 1455              	.LBB135:
 171:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
GAS LISTING /tmp/ccCh3VK6.s 			page 40


 1456              		.loc 2 171 5
 172:src/../h/riscv.hpp ****     return sstatus;
 1457              		.loc 2 172 5
 172:src/../h/riscv.hpp ****     return sstatus;
 1458              		.loc 2 172 76 is_stmt 0
 1459              	#APP
 1460              	# 172 "src/../h/riscv.hpp" 1
 1461              		csrr a5, sstatus
 1462              	# 0 "" 2
 1463              	#NO_APP
 1464 0548 2338F4F8 		sd	a5,-112(s0)
 173:src/../h/riscv.hpp **** }
 1465              		.loc 2 173 5 is_stmt 1
 173:src/../h/riscv.hpp **** }
 1466              		.loc 2 173 12 is_stmt 0
 1467 054c 833704F9 		ld	a5,-112(s0)
 1468              	.LBE135:
 1469              	.LBE134:
 159:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 1470              		.loc 1 159 49
 1471 0550 2334F4F6 		sd	a5,-152(s0)
 160:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 1472              		.loc 1 160 13 is_stmt 1
 160:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 1473              		.loc 1 160 35 is_stmt 0
 1474 0554 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 1474      83B70700 
 1475 055c 23B00700 		sd	zero,0(a5)
 161:src/riscv.cpp ****             TCB::dispatch();
 1476              		.loc 1 161 13 is_stmt 1
 161:src/riscv.cpp ****             TCB::dispatch();
 1477              		.loc 1 161 26 is_stmt 0
 1478 0560 97000000 		call	_ZN3TCB8dispatchEv@plt
 1478      E7800000 
 1479              	.LVL89:
 162:src/riscv.cpp ****             w_sstatus(sstatus);
 1480              		.loc 1 162 13 is_stmt 1
 162:src/riscv.cpp ****             w_sstatus(sstatus);
 1481              		.loc 1 162 22 is_stmt 0
 1482 0568 833784F6 		ld	a5,-152(s0)
 1483              	.LVL90:
 1484              	.LBB136:
 1485              	.LBB137:
 178:src/../h/riscv.hpp **** }
 1486              		.loc 2 178 5 is_stmt 1
 178:src/../h/riscv.hpp **** }
 1487              		.loc 2 178 77 is_stmt 0
 1488              	#APP
 1489              	# 178 "src/../h/riscv.hpp" 1
 1490              		csrw sstatus, a5
 1491              	# 0 "" 2
 1492              	.LVL91:
 1493              	#NO_APP
 1494              	.LBE137:
 1495              	.LBE136:
 163:src/riscv.cpp ****             w_sepc(sepc);
 1496              		.loc 1 163 13 is_stmt 1
GAS LISTING /tmp/ccCh3VK6.s 			page 41


 163:src/riscv.cpp ****             w_sepc(sepc);
 1497              		.loc 1 163 19 is_stmt 0
 1498 0570 833704F6 		ld	a5,-160(s0)
 1499              	.LVL92:
 1500              	.LBB138:
 1501              	.LBB139:
 110:src/../h/riscv.hpp **** }
 1502              		.loc 2 110 5 is_stmt 1
 110:src/../h/riscv.hpp **** }
 1503              		.loc 2 110 65 is_stmt 0
 1504              	#APP
 1505              	# 110 "src/../h/riscv.hpp" 1
 111:src/../h/riscv.hpp **** 
 1506              		csrw sepc, a5
 1507              	# 0 "" 2
 1508              		.loc 2 111 1
 1509              	#NO_APP
 1510 0578 6FF09FD3 		j	.L3
 1511              	.LVL93:
 1512              	.L48:
 1513              	.LBE139:
 1514              	.LBE138:
 1515              	.LBE131:
 1516              	.LBE128:
 1517              	.LBE125:
 1518              	.LBB140:
 1519              	.LBB104:
 169:src/riscv.cpp ****         uint64 num = plic_claim();
 1520              		.loc 1 169 9 is_stmt 1
 169:src/riscv.cpp ****         uint64 num = plic_claim();
 1521              		.loc 1 169 32 is_stmt 0
 1522 057c 97000000 		call	plic_claim@plt
 1522      E7800000 
 1523              	.LVL94:
 1524 0584 93040500 		mv	s1,a0
 1525              	.LVL95:
 170:src/riscv.cpp ****         if( num == CONSOLE_IRQ){
 1526              		.loc 1 170 9 is_stmt 1
 1527              	.LBB105:
 1528 0588 9307A000 		li	a5,10
 1529 058c 630AF500 		beq	a0,a5,.L67
 1530              	.LVL96:
 1531              	.L32:
 1532              	.LBE105:
 187:src/riscv.cpp ****         plic_complete((int) num);
 1533              		.loc 1 187 9
 187:src/riscv.cpp ****         plic_complete((int) num);
 1534              		.loc 1 187 22 is_stmt 0
 1535 0590 13850400 		mv	a0,s1
 1536 0594 97000000 		call	plic_complete@plt
 1536      E7800000 
 1537              	.LVL97:
 1538              	.LBE104:
 1539 059c 6FF05FD1 		j	.L3
 1540              	.LVL98:
 1541              	.L67:
 1542              	.LBB123:
GAS LISTING /tmp/ccCh3VK6.s 			page 42


 1543              	.LBB121:
 1544              	.LBB106:
 171:src/riscv.cpp ****             char volatile status = *((char *)CONSOLE_STATUS);
 1545              		.loc 1 171 13 is_stmt 1
 171:src/riscv.cpp ****             char volatile status = *((char *)CONSOLE_STATUS);
 1546              		.loc 1 171 36 is_stmt 0
 1547 05a0 97070000 		la	a5,CONSOLE_STATUS
 1547      83B70700 
 1548 05a8 03B90700 		ld	s2,0(a5)
 1549 05ac 83470900 		lbu	a5,0(s2)
 171:src/riscv.cpp ****             char volatile status = *((char *)CONSOLE_STATUS);
 1550              		.loc 1 171 27
 1551 05b0 2303F4F4 		sb	a5,-186(s0)
 1552              	.LVL99:
 1553              	.L36:
 172:src/riscv.cpp ****             while( (CONSOLE_RX_STATUS_BIT & status) && !kConsole::getInput()->isFull()){
 1554              		.loc 1 172 13 is_stmt 1
 172:src/riscv.cpp ****             while( (CONSOLE_RX_STATUS_BIT & status) && !kConsole::getInput()->isFull()){
 1555              		.loc 1 172 53
 172:src/riscv.cpp ****             while( (CONSOLE_RX_STATUS_BIT & status) && !kConsole::getInput()->isFull()){
 1556              		.loc 1 172 45 is_stmt 0
 1557 05b4 834764F4 		lbu	a5,-186(s0)
 172:src/riscv.cpp ****             while( (CONSOLE_RX_STATUS_BIT & status) && !kConsole::getInput()->isFull()){
 1558              		.loc 1 172 53
 1559 05b8 93F71700 		andi	a5,a5,1
 1560 05bc 638E0706 		beqz	a5,.L33
 1561              	.LBB107:
 1562              	.LBB108:
  24:src/../h/kConsole.hpp **** 
 1563              		.loc 3 24 35 is_stmt 1
  24:src/../h/kConsole.hpp **** 
 1564              		.loc 3 24 42 is_stmt 0
 1565 05c0 97070000 		la	a5,_ZN8kConsole5inputE
 1565      83B70700 
 1566 05c8 03B70700 		ld	a4,0(a5)
 1567              	.LVL100:
 1568              	.LBE108:
 1569              	.LBE107:
 1570              	.LBB109:
 1571              	.LBB110:
  33:src/../h/IOBuffer.hpp **** 
 1572              		.loc 4 33 27 is_stmt 1
  33:src/../h/IOBuffer.hpp **** 
 1573              		.loc 4 33 35 is_stmt 0
 1574 05cc 83370701 		ld	a5,16(a4)
  33:src/../h/IOBuffer.hpp **** 
 1575              		.loc 4 33 40
 1576 05d0 93871700 		addi	a5,a5,1
  33:src/../h/IOBuffer.hpp **** 
 1577              		.loc 4 33 47
 1578 05d4 83368701 		ld	a3,24(a4)
  33:src/../h/IOBuffer.hpp **** 
 1579              		.loc 4 33 45
 1580 05d8 B3F7D702 		remu	a5,a5,a3
  33:src/../h/IOBuffer.hpp **** 
 1581              		.loc 4 33 55
 1582 05dc 03378700 		ld	a4,8(a4)
GAS LISTING /tmp/ccCh3VK6.s 			page 43


 1583              	.LVL101:
 1584              	.LBE110:
 1585              	.LBE109:
 172:src/riscv.cpp ****             while( (CONSOLE_RX_STATUS_BIT & status) && !kConsole::getInput()->isFull()){
 1586              		.loc 1 172 53
 1587 05e0 638CE704 		beq	a5,a4,.L33
 1588              	.LBB111:
 173:src/riscv.cpp ****                 char* volatile rx = (char *)CONSOLE_RX_DATA;
 1589              		.loc 1 173 17 is_stmt 1
 173:src/riscv.cpp ****                 char* volatile rx = (char *)CONSOLE_RX_DATA;
 1590              		.loc 1 173 32 is_stmt 0
 1591 05e4 97070000 		la	a5,CONSOLE_RX_DATA
 1591      83B70700 
 1592 05ec 83B70700 		ld	a5,0(a5)
 1593 05f0 2338F4F6 		sd	a5,-144(s0)
 174:src/riscv.cpp ****                 char volatile c = *rx;
 1594              		.loc 1 174 17 is_stmt 1
 174:src/riscv.cpp ****                 char volatile c = *rx;
 1595              		.loc 1 174 36 is_stmt 0
 1596 05f4 833704F7 		ld	a5,-144(s0)
 174:src/riscv.cpp ****                 char volatile c = *rx;
 1597              		.loc 1 174 35
 1598 05f8 83C70700 		lbu	a5,0(a5)
 174:src/riscv.cpp ****                 char volatile c = *rx;
 1599              		.loc 1 174 36
 1600 05fc A303F4F4 		sb	a5,-185(s0)
 175:src/riscv.cpp ****                 putc(c);
 1601              		.loc 1 175 17 is_stmt 1
 175:src/riscv.cpp ****                 putc(c);
 1602              		.loc 1 175 21 is_stmt 0
 1603 0600 034574F4 		lbu	a0,-185(s0)
 1604 0604 1375F50F 		andi	a0,a0,0xff
 1605 0608 97000000 		call	_Z4putcc@plt
 1605      E7800000 
 1606              	.LVL102:
 176:src/riscv.cpp ****                 kConsole::getInput()->put(c);
 1607              		.loc 1 176 17 is_stmt 1
 1608              	.LBB112:
 1609              	.LBB113:
  24:src/../h/kConsole.hpp **** 
 1610              		.loc 3 24 35
 1611              	.LBE113:
 1612              	.LBE112:
 176:src/riscv.cpp ****                 kConsole::getInput()->put(c);
 1613              		.loc 1 176 42 is_stmt 0
 1614 0610 834574F4 		lbu	a1,-185(s0)
 1615 0614 93F5F50F 		andi	a1,a1,0xff
 1616 0618 97070000 		la	a5,_ZN8kConsole5inputE
 1616      83B70700 
 1617 0620 03B50700 		ld	a0,0(a5)
 1618 0624 97000000 		call	_ZN8IOBuffer3putEc@plt
 1618      E7800000 
 1619              	.LVL103:
 177:src/riscv.cpp ****                 status = *((char *)CONSOLE_STATUS);
 1620              		.loc 1 177 17 is_stmt 1
 177:src/riscv.cpp ****                 status = *((char *)CONSOLE_STATUS);
 1621              		.loc 1 177 26 is_stmt 0
GAS LISTING /tmp/ccCh3VK6.s 			page 44


 1622 062c 83470900 		lbu	a5,0(s2)
 177:src/riscv.cpp ****                 status = *((char *)CONSOLE_STATUS);
 1623              		.loc 1 177 24
 1624 0630 2303F4F4 		sb	a5,-186(s0)
 1625              	.LBE111:
 172:src/riscv.cpp ****             while( (CONSOLE_RX_STATUS_BIT & status) && !kConsole::getInput()->isFull()){
 1626              		.loc 1 172 13
 1627 0634 6FF01FF8 		j	.L36
 1628              	.L33:
 179:src/riscv.cpp ****             status = *((char *)CONSOLE_STATUS);
 1629              		.loc 1 179 13 is_stmt 1 discriminator 4
 179:src/riscv.cpp ****             status = *((char *)CONSOLE_STATUS);
 1630              		.loc 1 179 22 is_stmt 0 discriminator 4
 1631 0638 83470900 		lbu	a5,0(s2)
 179:src/riscv.cpp ****             status = *((char *)CONSOLE_STATUS);
 1632              		.loc 1 179 20 discriminator 4
 1633 063c 2303F4F4 		sb	a5,-186(s0)
 1634              	.L35:
 180:src/riscv.cpp ****             while ((status &  CONSOLE_TX_STATUS_BIT ) && !kConsole::getOutput()->isEmpty()) {
 1635              		.loc 1 180 13 is_stmt 1
 180:src/riscv.cpp ****             while ((status &  CONSOLE_TX_STATUS_BIT ) && !kConsole::getOutput()->isEmpty()) {
 1636              		.loc 1 180 55
 180:src/riscv.cpp ****             while ((status &  CONSOLE_TX_STATUS_BIT ) && !kConsole::getOutput()->isEmpty()) {
 1637              		.loc 1 180 21 is_stmt 0
 1638 0640 834764F4 		lbu	a5,-186(s0)
 1639 0644 93F7F70F 		andi	a5,a5,0xff
 180:src/riscv.cpp ****             while ((status &  CONSOLE_TX_STATUS_BIT ) && !kConsole::getOutput()->isEmpty()) {
 1640              		.loc 1 180 55
 1641 0648 93F70702 		andi	a5,a5,32
 1642 064c E38207F4 		beqz	a5,.L32
 1643              	.LBB114:
 1644              	.LBB115:
 1645              		.loc 3 26 36 is_stmt 1
 1646              		.loc 3 26 43 is_stmt 0
 1647 0650 97070000 		la	a5,_ZN8kConsole6outputE
 1647      83B70700 
 1648 0658 03B50700 		ld	a0,0(a5)
 1649              	.LVL104:
 1650              	.LBE115:
 1651              	.LBE114:
 1652              	.LBB116:
 1653              	.LBB117:
 1654              		.loc 4 35 28 is_stmt 1
 1655              		.loc 4 35 35 is_stmt 0
 1656 065c 03378500 		ld	a4,8(a0)
 1657              		.loc 4 35 43
 1658 0660 83370501 		ld	a5,16(a0)
 1659              	.LVL105:
 1660              	.LBE117:
 1661              	.LBE116:
 180:src/riscv.cpp ****             while ((status &  CONSOLE_TX_STATUS_BIT ) && !kConsole::getOutput()->isEmpty()) {
 1662              		.loc 1 180 55
 1663 0664 E306F7F2 		beq	a4,a5,.L32
 1664              	.LBB118:
 181:src/riscv.cpp ****                 char  c = kConsole::getOutput()->get();
 1665              		.loc 1 181 17 is_stmt 1
 1666              	.LBE118:
GAS LISTING /tmp/ccCh3VK6.s 			page 45


 1667              	.LBE106:
 1668              	.LBE121:
 1669              	.LBE123:
 1670              	.LBE140:
 1671              	.LBE347:
 1672              	.LBE366:
 1673              		.loc 3 26 36
 1674              	.LBB367:
 1675              	.LBB348:
 1676              	.LBB141:
 1677              	.LBB124:
 1678              	.LBB122:
 1679              	.LBB120:
 1680              	.LBB119:
 181:src/riscv.cpp ****                 char  c = kConsole::getOutput()->get();
 1681              		.loc 1 181 53 is_stmt 0
 1682 0668 97000000 		call	_ZN8IOBuffer3getEv@plt
 1682      E7800000 
 1683              	.LVL106:
 182:src/riscv.cpp ****                 *((uint64 *) CONSOLE_TX_DATA)= c;
 1684              		.loc 1 182 17 is_stmt 1
 1685 0670 97070000 		la	a5,CONSOLE_TX_DATA
 1685      83B70700 
 1686 0678 83B70700 		ld	a5,0(a5)
 182:src/riscv.cpp ****                 *((uint64 *) CONSOLE_TX_DATA)= c;
 1687              		.loc 1 182 46 is_stmt 0
 1688 067c 23B0A700 		sd	a0,0(a5)
 183:src/riscv.cpp ****                 status = *((char *)CONSOLE_STATUS);
 1689              		.loc 1 183 17 is_stmt 1
 183:src/riscv.cpp ****                 status = *((char *)CONSOLE_STATUS);
 1690              		.loc 1 183 26 is_stmt 0
 1691 0680 83470900 		lbu	a5,0(s2)
 183:src/riscv.cpp ****                 status = *((char *)CONSOLE_STATUS);
 1692              		.loc 1 183 24
 1693 0684 2303F4F4 		sb	a5,-186(s0)
 1694              	.LBE119:
 180:src/riscv.cpp ****             while ((status &  CONSOLE_TX_STATUS_BIT ) && !kConsole::getOutput()->isEmpty()) {
 1695              		.loc 1 180 13
 1696 0688 6FF09FFB 		j	.L35
 1697              	.LBE120:
 1698              	.LBE122:
 1699              	.LBE124:
 1700              	.LBE141:
 1701              	.LBE348:
 1702              	.LBE367:
 1703              		.cfi_endproc
 1704              	.LFE57:
 1706              	.Letext0:
 1707              		.file 6 "src/../h/../lib/hw.h"
 1708              		.file 7 "src/../h/../test/../h/../h/MemoryAllocator.hpp"
 1709              		.file 8 "src/../h/kSemaphore.hpp"
 1710              		.file 9 "src/../h/../test/../h/syscall_c.hpp"
 1711              		.file 10 "src/../h/../test/printing.hpp"
GAS LISTING /tmp/ccCh3VK6.s 			page 46


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccCh3VK6.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccCh3VK6.s:13     .text:0000000000000000 .L0 
     /tmp/ccCh3VK6.s:14     .text:0000000000000000 .L0 
     /tmp/ccCh3VK6.s:15     .text:0000000000000004 .L0 
     /tmp/ccCh3VK6.s:17     .text:0000000000000008 .L0 
     /tmp/ccCh3VK6.s:19     .text:000000000000000c .L0 
     /tmp/ccCh3VK6.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:15     .text:000000000000000c .L0 
     /tmp/ccCh3VK6.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:16     .text:0000000000000010 .L0 
     /tmp/ccCh3VK6.s:33     .text:0000000000000014 .L0 
     /tmp/ccCh3VK6.s:34     .text:0000000000000018 .L0 
     /tmp/ccCh3VK6.s:35     .text:0000000000000018 .L0 
     /tmp/ccCh3VK6.s:37     .text:000000000000001c .L0 
     /tmp/ccCh3VK6.s:39     .text:0000000000000020 .L0 
     /tmp/ccCh3VK6.s:56     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccCh3VK6.s:59     .text:0000000000000020 .L0 
     /tmp/ccCh3VK6.s:60     .text:0000000000000020 .L0 
     /tmp/ccCh3VK6.s:61     .text:0000000000000024 .L0 
     /tmp/ccCh3VK6.s:66     .text:0000000000000034 .L0 
     /tmp/ccCh3VK6.s:67     .text:0000000000000034 .L0 
     /tmp/ccCh3VK6.s:68     .text:0000000000000034 .L0 
     /tmp/ccCh3VK6.s:69     .text:0000000000000034 .L0 
     /tmp/ccCh3VK6.s:71     .text:0000000000000038 .L0 
     /tmp/ccCh3VK6.s:73     .text:0000000000000038 .L0 
     /tmp/ccCh3VK6.s:74     .text:0000000000000038 .L0 
     /tmp/ccCh3VK6.s:75     .text:0000000000000038 .L0 
     /tmp/ccCh3VK6.s:76     .text:0000000000000038 .L0 
     /tmp/ccCh3VK6.s:77     .text:0000000000000038 .L0 
     /tmp/ccCh3VK6.s:78     .text:0000000000000038 .L0 
     /tmp/ccCh3VK6.s:79     .text:0000000000000038 .L0 
     /tmp/ccCh3VK6.s:80     .text:0000000000000038 .L0 
     /tmp/ccCh3VK6.s:81     .text:0000000000000038 .L0 
       src/riscv.cpp:29     .text:0000000000000038 .L0 
     /tmp/ccCh3VK6.s:89     .text:0000000000000040 .L0 
       src/riscv.cpp:30     .text:0000000000000040 .L0 
     /tmp/ccCh3VK6.s:97     .text:0000000000000048 .L0 
       src/riscv.cpp:31     .text:0000000000000048 .L0 
     /tmp/ccCh3VK6.s:105    .text:0000000000000050 .L0 
       src/riscv.cpp:32     .text:0000000000000050 .L0 
     /tmp/ccCh3VK6.s:113    .text:0000000000000058 .L0 
       src/riscv.cpp:33     .text:0000000000000058 .L0 
     /tmp/ccCh3VK6.s:121    .text:0000000000000060 .L0 
       src/riscv.cpp:34     .text:0000000000000060 .L0 
     /tmp/ccCh3VK6.s:129    .text:0000000000000068 .L0 
       src/riscv.cpp:35     .text:0000000000000068 .L0 
     /tmp/ccCh3VK6.s:137    .text:0000000000000070 .L0 
       src/riscv.cpp:36     .text:0000000000000070 .L0 
     /tmp/ccCh3VK6.s:148    .text:0000000000000078 .L0 
     /tmp/ccCh3VK6.s:149    .text:0000000000000078 .L0 
     /tmp/ccCh3VK6.s:150    .text:0000000000000078 .L0 
  src/../h/riscv.hpp:92     .text:0000000000000078 .L0 
     /tmp/ccCh3VK6.s:158    .text:0000000000000080 .L0 
     /tmp/ccCh3VK6.s:159    .text:0000000000000080 .L0 
     /tmp/ccCh3VK6.s:165    .text:0000000000000084 .L0 
GAS LISTING /tmp/ccCh3VK6.s 			page 47


     /tmp/ccCh3VK6.s:166    .text:0000000000000084 .L0 
     /tmp/ccCh3VK6.s:168    .text:0000000000000088 .L0 
     /tmp/ccCh3VK6.s:174    .text:0000000000000090 .L0 
     /tmp/ccCh3VK6.s:184    .text:00000000000000a0 .L0 
     /tmp/ccCh3VK6.s:192    .text:00000000000000b0 .L0 
     /tmp/ccCh3VK6.s:193    .text:00000000000000b0 .L0 
     /tmp/ccCh3VK6.s:194    .text:00000000000000b0 .L0 
  src/../h/riscv.hpp:104    .text:00000000000000b0 .L0 
     /tmp/ccCh3VK6.s:202    .text:00000000000000b8 .L0 
     /tmp/ccCh3VK6.s:203    .text:00000000000000b8 .L0 
     /tmp/ccCh3VK6.s:207    .text:00000000000000bc .L0 
     /tmp/ccCh3VK6.s:211    .text:00000000000000c0 .L0 
     /tmp/ccCh3VK6.s:212    .text:00000000000000c0 .L0 
     /tmp/ccCh3VK6.s:213    .text:00000000000000c0 .L0 
  src/../h/riscv.hpp:92     .text:00000000000000c0 .L0 
     /tmp/ccCh3VK6.s:221    .text:00000000000000c8 .L0 
     /tmp/ccCh3VK6.s:222    .text:00000000000000c8 .L0 
     /tmp/ccCh3VK6.s:226    .text:00000000000000cc .L0 
     /tmp/ccCh3VK6.s:228    .text:00000000000000d0 .L0 
     /tmp/ccCh3VK6.s:229    .text:00000000000000d0 .L0 
     /tmp/ccCh3VK6.s:233    .text:00000000000000e0 .L0 
     /tmp/ccCh3VK6.s:234    .text:00000000000000e0 .L0 
     /tmp/ccCh3VK6.s:241    .text:00000000000000f8 .L0 
     /tmp/ccCh3VK6.s:242    .text:00000000000000f8 .L0 
     /tmp/ccCh3VK6.s:246    .text:0000000000000108 .L0 
     /tmp/ccCh3VK6.s:247    .text:0000000000000108 .L0 
     /tmp/ccCh3VK6.s:251    .text:0000000000000118 .L0 
     /tmp/ccCh3VK6.s:252    .text:0000000000000118 .L0 
     /tmp/ccCh3VK6.s:259    .text:0000000000000130 .L0 
     /tmp/ccCh3VK6.s:260    .text:0000000000000130 .L0 
     /tmp/ccCh3VK6.s:265    .text:0000000000000140 .L0 
     /tmp/ccCh3VK6.s:266    .text:0000000000000140 .L0 
     /tmp/ccCh3VK6.s:276    .text:0000000000000144 .L0 
     /tmp/ccCh3VK6.s:277    .text:0000000000000144 .L0 
     /tmp/ccCh3VK6.s:278    .text:0000000000000144 .L0 
  src/../h/riscv.hpp:104    .text:0000000000000144 .L0 
     /tmp/ccCh3VK6.s:286    .text:000000000000014c .L0 
     /tmp/ccCh3VK6.s:287    .text:000000000000014c .L0 
     /tmp/ccCh3VK6.s:291    .text:0000000000000150 .L0 
     /tmp/ccCh3VK6.s:293    .text:0000000000000154 .L0 
     /tmp/ccCh3VK6.s:297    .text:0000000000000158 .L0 
     /tmp/ccCh3VK6.s:298    .text:0000000000000158 .L0 
     /tmp/ccCh3VK6.s:299    .text:0000000000000158 .L0 
  src/../h/riscv.hpp:172    .text:0000000000000158 .L0 
     /tmp/ccCh3VK6.s:307    .text:0000000000000160 .L0 
     /tmp/ccCh3VK6.s:308    .text:0000000000000160 .L0 
     /tmp/ccCh3VK6.s:312    .text:0000000000000164 .L0 
     /tmp/ccCh3VK6.s:315    .text:0000000000000168 .L0 
     /tmp/ccCh3VK6.s:316    .text:0000000000000168 .L0 
     /tmp/ccCh3VK6.s:319    .text:000000000000016c .L0 
     /tmp/ccCh3VK6.s:329    .text:0000000000000174 .L0 
     /tmp/ccCh3VK6.s:330    .text:0000000000000174 .L0 
     /tmp/ccCh3VK6.s:332    .text:0000000000000178 .L0 
     /tmp/ccCh3VK6.s:344    .text:0000000000000180 .L0 
     /tmp/ccCh3VK6.s:345    .text:0000000000000180 .L0 
     /tmp/ccCh3VK6.s:347    .text:0000000000000184 .L0 
     /tmp/ccCh3VK6.s:361    .text:000000000000018c .L0 
GAS LISTING /tmp/ccCh3VK6.s 			page 48


     /tmp/ccCh3VK6.s:362    .text:000000000000018c .L0 
     /tmp/ccCh3VK6.s:364    .text:0000000000000190 .L0 
     /tmp/ccCh3VK6.s:380    .text:0000000000000198 .L0 
     /tmp/ccCh3VK6.s:381    .text:0000000000000198 .L0 
     /tmp/ccCh3VK6.s:383    .text:000000000000019c .L0 
     /tmp/ccCh3VK6.s:401    .text:00000000000001a4 .L0 
     /tmp/ccCh3VK6.s:402    .text:00000000000001a4 .L0 
     /tmp/ccCh3VK6.s:404    .text:00000000000001a8 .L0 
     /tmp/ccCh3VK6.s:424    .text:00000000000001b0 .L0 
     /tmp/ccCh3VK6.s:425    .text:00000000000001b0 .L0 
     /tmp/ccCh3VK6.s:427    .text:00000000000001b4 .L0 
     /tmp/ccCh3VK6.s:449    .text:00000000000001bc .L0 
     /tmp/ccCh3VK6.s:450    .text:00000000000001bc .L0 
     /tmp/ccCh3VK6.s:452    .text:00000000000001c0 .L0 
     /tmp/ccCh3VK6.s:476    .text:00000000000001c8 .L0 
     /tmp/ccCh3VK6.s:477    .text:00000000000001c8 .L0 
     /tmp/ccCh3VK6.s:479    .text:00000000000001cc .L0 
     /tmp/ccCh3VK6.s:505    .text:00000000000001d4 .L0 
     /tmp/ccCh3VK6.s:506    .text:00000000000001d4 .L0 
     /tmp/ccCh3VK6.s:508    .text:00000000000001d8 .L0 
     /tmp/ccCh3VK6.s:536    .text:00000000000001e0 .L0 
     /tmp/ccCh3VK6.s:537    .text:00000000000001e0 .L0 
     /tmp/ccCh3VK6.s:539    .text:00000000000001e4 .L0 
     /tmp/ccCh3VK6.s:569    .text:00000000000001ec .L0 
     /tmp/ccCh3VK6.s:570    .text:00000000000001ec .L0 
     /tmp/ccCh3VK6.s:572    .text:00000000000001f0 .L0 
     /tmp/ccCh3VK6.s:604    .text:00000000000001f8 .L0 
     /tmp/ccCh3VK6.s:605    .text:00000000000001f8 .L0 
     /tmp/ccCh3VK6.s:607    .text:00000000000001fc .L0 
     /tmp/ccCh3VK6.s:641    .text:0000000000000204 .L0 
     /tmp/ccCh3VK6.s:642    .text:0000000000000204 .L0 
     /tmp/ccCh3VK6.s:644    .text:0000000000000208 .L0 
     /tmp/ccCh3VK6.s:648    .text:0000000000000210 .L0 
     /tmp/ccCh3VK6.s:649    .text:0000000000000210 .L0 
     /tmp/ccCh3VK6.s:653    .text:000000000000021c .L0 
     /tmp/ccCh3VK6.s:654    .text:000000000000021c .L0 
     /tmp/ccCh3VK6.s:659    .text:000000000000022c .L0 
     /tmp/ccCh3VK6.s:660    .text:000000000000022c .L0 
     /tmp/ccCh3VK6.s:664    .text:000000000000023c .L0 
     /tmp/ccCh3VK6.s:667    .text:0000000000000240 .L0 
     /tmp/ccCh3VK6.s:668    .text:0000000000000240 .L0 
     /tmp/ccCh3VK6.s:669    .text:0000000000000240 .L0 
     /tmp/ccCh3VK6.s:672    .text:0000000000000248 .L0 
     /tmp/ccCh3VK6.s:678    .text:0000000000000250 .L0 
     /tmp/ccCh3VK6.s:679    .text:0000000000000250 .L0 
     /tmp/ccCh3VK6.s:688    .text:000000000000025c .L0 
     /tmp/ccCh3VK6.s:689    .text:000000000000025c .L0 
     /tmp/ccCh3VK6.s:691    .text:0000000000000260 .L0 
     /tmp/ccCh3VK6.s:696    .text:0000000000000264 .L0 
     /tmp/ccCh3VK6.s:717    .text:0000000000000268 .L0 
     /tmp/ccCh3VK6.s:736    .text:0000000000000268 .L0 
     /tmp/ccCh3VK6.s:737    .text:0000000000000268 .L0 
     /tmp/ccCh3VK6.s:740    .text:0000000000000270 .L0 
     /tmp/ccCh3VK6.s:743    .text:000000000000027c .L0 
     /tmp/ccCh3VK6.s:745    .text:0000000000000280 .L0 
     /tmp/ccCh3VK6.s:746    .text:0000000000000280 .L0 
     /tmp/ccCh3VK6.s:748    .text:0000000000000284 .L0 
GAS LISTING /tmp/ccCh3VK6.s 			page 49


     /tmp/ccCh3VK6.s:751    .text:0000000000000288 .L0 
     /tmp/ccCh3VK6.s:770    .text:000000000000028c .L0 
     /tmp/ccCh3VK6.s:771    .text:000000000000028c .L0 
     /tmp/ccCh3VK6.s:774    .text:0000000000000290 .L0 
     /tmp/ccCh3VK6.s:775    .text:0000000000000290 .L0 
     /tmp/ccCh3VK6.s:778    .text:0000000000000298 .L0 
       src/riscv.cpp:46     .text:0000000000000298 .L0 
     /tmp/ccCh3VK6.s:784    .text:000000000000029c .L0 
       src/riscv.cpp:47     .text:000000000000029c .L0 
     /tmp/ccCh3VK6.s:794    .text:00000000000002a0 .L0 
     /tmp/ccCh3VK6.s:795    .text:00000000000002a0 .L0 
     /tmp/ccCh3VK6.s:800    .text:00000000000002a4 .L0 
  src/../h/riscv.hpp:178    .text:00000000000002a4 .L0 
     /tmp/ccCh3VK6.s:810    .text:00000000000002a8 .L0 
     /tmp/ccCh3VK6.s:811    .text:00000000000002a8 .L0 
     /tmp/ccCh3VK6.s:816    .text:00000000000002ac .L0 
  src/../h/riscv.hpp:110    .text:00000000000002ac .L0 
     /tmp/ccCh3VK6.s:829    .text:00000000000002b0 .L0 
     /tmp/ccCh3VK6.s:830    .text:00000000000002b4 .L0 
     /tmp/ccCh3VK6.s:831    .text:00000000000002b4 .L0 
     /tmp/ccCh3VK6.s:833    .text:00000000000002b8 .L0 
     /tmp/ccCh3VK6.s:834    .text:00000000000002b8 .L0 
     /tmp/ccCh3VK6.s:836    .text:00000000000002bc .L0 
     /tmp/ccCh3VK6.s:838    .text:00000000000002c0 .L0 
     /tmp/ccCh3VK6.s:840    .text:00000000000002c4 .L0 
     /tmp/ccCh3VK6.s:844    .text:00000000000002c8 .L0 
     /tmp/ccCh3VK6.s:851    .text:00000000000002c8 .L0 
     /tmp/ccCh3VK6.s:852    .text:00000000000002c8 .L0 
     /tmp/ccCh3VK6.s:855    .text:00000000000002cc .L0 
     /tmp/ccCh3VK6.s:856    .text:00000000000002cc .L0 
     /tmp/ccCh3VK6.s:859    .text:00000000000002d4 .L0 
       src/riscv.cpp:51     .text:00000000000002d4 .L0 
     /tmp/ccCh3VK6.s:865    .text:00000000000002d8 .L0 
       src/riscv.cpp:52     .text:00000000000002d8 .L0 
     /tmp/ccCh3VK6.s:877    .text:00000000000002e0 .L0 
     /tmp/ccCh3VK6.s:878    .text:00000000000002e0 .L0 
     /tmp/ccCh3VK6.s:881    .text:00000000000002e4 .L0 
     /tmp/ccCh3VK6.s:882    .text:00000000000002e4 .L0 
     /tmp/ccCh3VK6.s:885    .text:00000000000002e8 .L0 
     /tmp/ccCh3VK6.s:886    .text:00000000000002e8 .L0 
     /tmp/ccCh3VK6.s:889    .text:00000000000002ec .L0 
     /tmp/ccCh3VK6.s:890    .text:00000000000002ec .L0 
     /tmp/ccCh3VK6.s:893    .text:00000000000002f0 .L0 
     /tmp/ccCh3VK6.s:894    .text:00000000000002f0 .L0 
     /tmp/ccCh3VK6.s:895    .text:00000000000002f0 .L0 
     /tmp/ccCh3VK6.s:898    .text:00000000000002f8 .L0 
     /tmp/ccCh3VK6.s:900    .text:00000000000002fc .L0 
     /tmp/ccCh3VK6.s:902    .text:0000000000000300 .L0 
     /tmp/ccCh3VK6.s:906    .text:0000000000000304 .L0 
       src/riscv.cpp:61     .text:0000000000000304 .L0 
     /tmp/ccCh3VK6.s:912    .text:0000000000000308 .L0 
       src/riscv.cpp:62     .text:0000000000000308 .L0 
     /tmp/ccCh3VK6.s:923    .text:0000000000000310 .L0 
     /tmp/ccCh3VK6.s:931    .text:0000000000000318 .L0 
     /tmp/ccCh3VK6.s:932    .text:0000000000000318 .L0 
     /tmp/ccCh3VK6.s:935    .text:0000000000000320 .L0 
       src/riscv.cpp:65     .text:0000000000000320 .L0 
GAS LISTING /tmp/ccCh3VK6.s 			page 50


     /tmp/ccCh3VK6.s:941    .text:0000000000000324 .L0 
       src/riscv.cpp:66     .text:0000000000000324 .L0 
     /tmp/ccCh3VK6.s:952    .text:000000000000032c .L0 
     /tmp/ccCh3VK6.s:953    .text:000000000000032c .L0 
     /tmp/ccCh3VK6.s:956    .text:0000000000000338 .L0 
     /tmp/ccCh3VK6.s:957    .text:0000000000000338 .L0 
     /tmp/ccCh3VK6.s:965    .text:0000000000000344 .L0 
     /tmp/ccCh3VK6.s:966    .text:0000000000000344 .L0 
     /tmp/ccCh3VK6.s:969    .text:0000000000000348 .L0 
     /tmp/ccCh3VK6.s:970    .text:0000000000000348 .L0 
     /tmp/ccCh3VK6.s:973    .text:000000000000034c .L0 
     /tmp/ccCh3VK6.s:974    .text:000000000000034c .L0 
     /tmp/ccCh3VK6.s:978    .text:0000000000000358 .L0 
     /tmp/ccCh3VK6.s:981    .text:000000000000035c .L0 
     /tmp/ccCh3VK6.s:982    .text:000000000000035c .L0 
     /tmp/ccCh3VK6.s:984    .text:0000000000000360 .L0 
     /tmp/ccCh3VK6.s:988    .text:0000000000000364 .L0 
       src/riscv.cpp:77     .text:0000000000000364 .L0 
     /tmp/ccCh3VK6.s:994    .text:0000000000000368 .L0 
       src/riscv.cpp:78     .text:0000000000000368 .L0 
     /tmp/ccCh3VK6.s:1005   .text:0000000000000370 .L0 
     /tmp/ccCh3VK6.s:1013   .text:0000000000000378 .L0 
     /tmp/ccCh3VK6.s:1014   .text:0000000000000378 .L0 
     /tmp/ccCh3VK6.s:1017   .text:000000000000037c .L0 
     /tmp/ccCh3VK6.s:1018   .text:000000000000037c .L0 
     /tmp/ccCh3VK6.s:1020   .text:0000000000000380 .L0 
     /tmp/ccCh3VK6.s:1024   .text:0000000000000384 .L0 
       src/riscv.cpp:84     .text:0000000000000384 .L0 
     /tmp/ccCh3VK6.s:1030   .text:0000000000000388 .L0 
       src/riscv.cpp:85     .text:0000000000000388 .L0 
     /tmp/ccCh3VK6.s:1041   .text:0000000000000390 .L0 
     /tmp/ccCh3VK6.s:1042   .text:0000000000000390 .L0 
     /tmp/ccCh3VK6.s:1053   .text:00000000000003a0 .L0 
     /tmp/ccCh3VK6.s:1054   .text:00000000000003a0 .L0 
     /tmp/ccCh3VK6.s:1057   .text:00000000000003a4 .L0 
     /tmp/ccCh3VK6.s:1058   .text:00000000000003a4 .L0 
     /tmp/ccCh3VK6.s:1060   .text:00000000000003a8 .L0 
     /tmp/ccCh3VK6.s:1064   .text:00000000000003ac .L0 
       src/riscv.cpp:91     .text:00000000000003ac .L0 
     /tmp/ccCh3VK6.s:1070   .text:00000000000003b0 .L0 
       src/riscv.cpp:92     .text:00000000000003b0 .L0 
     /tmp/ccCh3VK6.s:1081   .text:00000000000003b8 .L0 
     /tmp/ccCh3VK6.s:1082   .text:00000000000003b8 .L0 
     /tmp/ccCh3VK6.s:1093   .text:00000000000003c8 .L0 
     /tmp/ccCh3VK6.s:1094   .text:00000000000003c8 .L0 
     /tmp/ccCh3VK6.s:1097   .text:00000000000003cc .L0 
     /tmp/ccCh3VK6.s:1098   .text:00000000000003cc .L0 
     /tmp/ccCh3VK6.s:1100   .text:00000000000003d0 .L0 
     /tmp/ccCh3VK6.s:1104   .text:00000000000003d4 .L0 
       src/riscv.cpp:98     .text:00000000000003d4 .L0 
     /tmp/ccCh3VK6.s:1110   .text:00000000000003d8 .L0 
       src/riscv.cpp:99     .text:00000000000003d8 .L0 
     /tmp/ccCh3VK6.s:1121   .text:00000000000003e0 .L0 
     /tmp/ccCh3VK6.s:1122   .text:00000000000003e0 .L0 
     /tmp/ccCh3VK6.s:1133   .text:00000000000003f0 .L0 
     /tmp/ccCh3VK6.s:1134   .text:00000000000003f0 .L0 
     /tmp/ccCh3VK6.s:1137   .text:00000000000003f4 .L0 
GAS LISTING /tmp/ccCh3VK6.s 			page 51


     /tmp/ccCh3VK6.s:1138   .text:00000000000003f4 .L0 
     /tmp/ccCh3VK6.s:1141   .text:00000000000003f8 .L0 
     /tmp/ccCh3VK6.s:1142   .text:00000000000003f8 .L0 
     /tmp/ccCh3VK6.s:1144   .text:00000000000003fc .L0 
     /tmp/ccCh3VK6.s:1148   .text:0000000000000400 .L0 
       src/riscv.cpp:106    .text:0000000000000400 .L0 
     /tmp/ccCh3VK6.s:1154   .text:0000000000000404 .L0 
       src/riscv.cpp:107    .text:0000000000000404 .L0 
     /tmp/ccCh3VK6.s:1165   .text:000000000000040c .L0 
     /tmp/ccCh3VK6.s:1166   .text:000000000000040c .L0 
     /tmp/ccCh3VK6.s:1177   .text:000000000000041c .L0 
     /tmp/ccCh3VK6.s:1178   .text:000000000000041c .L0 
     /tmp/ccCh3VK6.s:1181   .text:0000000000000420 .L0 
     /tmp/ccCh3VK6.s:1182   .text:0000000000000420 .L0 
     /tmp/ccCh3VK6.s:1184   .text:0000000000000424 .L0 
     /tmp/ccCh3VK6.s:1188   .text:0000000000000428 .L0 
       src/riscv.cpp:113    .text:0000000000000428 .L0 
     /tmp/ccCh3VK6.s:1194   .text:000000000000042c .L0 
       src/riscv.cpp:114    .text:000000000000042c .L0 
     /tmp/ccCh3VK6.s:1205   .text:0000000000000434 .L0 
     /tmp/ccCh3VK6.s:1206   .text:0000000000000434 .L0 
     /tmp/ccCh3VK6.s:1217   .text:0000000000000444 .L0 
     /tmp/ccCh3VK6.s:1218   .text:0000000000000444 .L0 
     /tmp/ccCh3VK6.s:1221   .text:0000000000000448 .L0 
     /tmp/ccCh3VK6.s:1222   .text:0000000000000448 .L0 
     /tmp/ccCh3VK6.s:1225   .text:0000000000000450 .L0 
       src/riscv.cpp:119    .text:0000000000000450 .L0 
     /tmp/ccCh3VK6.s:1231   .text:0000000000000454 .L0 
       src/riscv.cpp:120    .text:0000000000000454 .L0 
     /tmp/ccCh3VK6.s:1243   .text:000000000000045c .L0 
     /tmp/ccCh3VK6.s:1244   .text:000000000000045c .L0 
     /tmp/ccCh3VK6.s:1248   .text:000000000000046c .L0 
     /tmp/ccCh3VK6.s:1252   .text:0000000000000470 .L0 
     /tmp/ccCh3VK6.s:1253   .text:0000000000000470 .L0 
     /tmp/ccCh3VK6.s:1254   .text:0000000000000470 .L0 
     /tmp/ccCh3VK6.s:1256   .text:0000000000000474 .L0 
     /tmp/ccCh3VK6.s:1261   .text:000000000000047c .L0 
     /tmp/ccCh3VK6.s:1262   .text:000000000000047c .L0 
     /tmp/ccCh3VK6.s:1270   .text:0000000000000488 .L0 
     /tmp/ccCh3VK6.s:1271   .text:0000000000000488 .L0 
     /tmp/ccCh3VK6.s:1273   .text:000000000000048c .L0 
     /tmp/ccCh3VK6.s:1275   .text:0000000000000490 .L0 
     /tmp/ccCh3VK6.s:1277   .text:0000000000000494 .L0 
     /tmp/ccCh3VK6.s:1279   .text:0000000000000498 .L0 
     /tmp/ccCh3VK6.s:1284   .text:000000000000049c .L0 
     /tmp/ccCh3VK6.s:1287   .text:00000000000004a0 .L0 
     /tmp/ccCh3VK6.s:1288   .text:00000000000004a0 .L0 
     /tmp/ccCh3VK6.s:1292   .text:00000000000004b0 .L0 
     /tmp/ccCh3VK6.s:1293   .text:00000000000004b0 .L0 
     /tmp/ccCh3VK6.s:1295   .text:00000000000004b4 .L0 
     /tmp/ccCh3VK6.s:1297   .text:00000000000004b8 .L0 
     /tmp/ccCh3VK6.s:1316   .text:00000000000004bc .L0 
     /tmp/ccCh3VK6.s:1334   .text:00000000000004bc .L0 
     /tmp/ccCh3VK6.s:1335   .text:00000000000004bc .L0 
     /tmp/ccCh3VK6.s:1340   .text:00000000000004cc .L0 
     /tmp/ccCh3VK6.s:1341   .text:00000000000004cc .L0 
     /tmp/ccCh3VK6.s:1343   .text:00000000000004d0 .L0 
GAS LISTING /tmp/ccCh3VK6.s 			page 52


     /tmp/ccCh3VK6.s:1346   .text:00000000000004d4 .L0 
     /tmp/ccCh3VK6.s:1349   .text:00000000000004d8 .L0 
     /tmp/ccCh3VK6.s:1350   .text:00000000000004d8 .L0 
     /tmp/ccCh3VK6.s:1353   .text:00000000000004e0 .L0 
     /tmp/ccCh3VK6.s:1355   .text:00000000000004e4 .L0 
     /tmp/ccCh3VK6.s:1356   .text:00000000000004e4 .L0 
       src/riscv.cpp:132    .text:00000000000004e8 .L0 
     /tmp/ccCh3VK6.s:1363   .text:00000000000004ec .L0 
       src/riscv.cpp:133    .text:00000000000004ec .L0 
     /tmp/ccCh3VK6.s:1391   .text:00000000000004f4 .L0 
     /tmp/ccCh3VK6.s:1392   .text:00000000000004f4 .L0 
     /tmp/ccCh3VK6.s:1393   .text:00000000000004f4 .L0 
     /tmp/ccCh3VK6.s:1403   .text:00000000000004fc .L0 
     /tmp/ccCh3VK6.s:1404   .text:00000000000004fc .L0 
     /tmp/ccCh3VK6.s:1407   .text:0000000000000504 .L0 
     /tmp/ccCh3VK6.s:1408   .text:0000000000000504 .L0 
     /tmp/ccCh3VK6.s:1411   .text:000000000000050c .L0 
     /tmp/ccCh3VK6.s:1412   .text:000000000000050c .L0 
     /tmp/ccCh3VK6.s:1418   .text:0000000000000520 .L0 
     /tmp/ccCh3VK6.s:1419   .text:0000000000000520 .L0 
     /tmp/ccCh3VK6.s:1426   .text:000000000000052c .L0 
     /tmp/ccCh3VK6.s:1427   .text:000000000000052c .L0 
     /tmp/ccCh3VK6.s:1432   .text:0000000000000530 .L0 
     /tmp/ccCh3VK6.s:1437   .text:0000000000000534 .L0 
     /tmp/ccCh3VK6.s:1438   .text:0000000000000534 .L0 
     /tmp/ccCh3VK6.s:1439   .text:0000000000000534 .L0 
  src/../h/riscv.hpp:104    .text:0000000000000534 .L0 
     /tmp/ccCh3VK6.s:1447   .text:000000000000053c .L0 
     /tmp/ccCh3VK6.s:1448   .text:000000000000053c .L0 
     /tmp/ccCh3VK6.s:1452   .text:0000000000000540 .L0 
     /tmp/ccCh3VK6.s:1456   .text:0000000000000544 .L0 
     /tmp/ccCh3VK6.s:1457   .text:0000000000000544 .L0 
     /tmp/ccCh3VK6.s:1458   .text:0000000000000544 .L0 
  src/../h/riscv.hpp:172    .text:0000000000000544 .L0 
     /tmp/ccCh3VK6.s:1466   .text:000000000000054c .L0 
     /tmp/ccCh3VK6.s:1467   .text:000000000000054c .L0 
     /tmp/ccCh3VK6.s:1471   .text:0000000000000550 .L0 
     /tmp/ccCh3VK6.s:1473   .text:0000000000000554 .L0 
     /tmp/ccCh3VK6.s:1474   .text:0000000000000554 .L0 
     /tmp/ccCh3VK6.s:1477   .text:0000000000000560 .L0 
     /tmp/ccCh3VK6.s:1478   .text:0000000000000560 .L0 
     /tmp/ccCh3VK6.s:1481   .text:0000000000000568 .L0 
     /tmp/ccCh3VK6.s:1482   .text:0000000000000568 .L0 
     /tmp/ccCh3VK6.s:1487   .text:000000000000056c .L0 
  src/../h/riscv.hpp:178    .text:000000000000056c .L0 
     /tmp/ccCh3VK6.s:1497   .text:0000000000000570 .L0 
     /tmp/ccCh3VK6.s:1498   .text:0000000000000570 .L0 
     /tmp/ccCh3VK6.s:1503   .text:0000000000000574 .L0 
  src/../h/riscv.hpp:110    .text:0000000000000574 .L0 
     /tmp/ccCh3VK6.s:1510   .text:0000000000000578 .L0 
     /tmp/ccCh3VK6.s:1521   .text:000000000000057c .L0 
     /tmp/ccCh3VK6.s:1522   .text:000000000000057c .L0 
     /tmp/ccCh3VK6.s:1528   .text:0000000000000588 .L0 
     /tmp/ccCh3VK6.s:1534   .text:0000000000000590 .L0 
     /tmp/ccCh3VK6.s:1535   .text:0000000000000590 .L0 
     /tmp/ccCh3VK6.s:1546   .text:00000000000005a0 .L0 
     /tmp/ccCh3VK6.s:1547   .text:00000000000005a0 .L0 
GAS LISTING /tmp/ccCh3VK6.s 			page 53


     /tmp/ccCh3VK6.s:1551   .text:00000000000005b0 .L0 
     /tmp/ccCh3VK6.s:1555   .text:00000000000005b4 .L0 
     /tmp/ccCh3VK6.s:1556   .text:00000000000005b4 .L0 
     /tmp/ccCh3VK6.s:1557   .text:00000000000005b4 .L0 
     /tmp/ccCh3VK6.s:1559   .text:00000000000005b8 .L0 
     /tmp/ccCh3VK6.s:1564   .text:00000000000005c0 .L0 
     /tmp/ccCh3VK6.s:1565   .text:00000000000005c0 .L0 
     /tmp/ccCh3VK6.s:1573   .text:00000000000005cc .L0 
     /tmp/ccCh3VK6.s:1574   .text:00000000000005cc .L0 
     /tmp/ccCh3VK6.s:1576   .text:00000000000005d0 .L0 
     /tmp/ccCh3VK6.s:1578   .text:00000000000005d4 .L0 
     /tmp/ccCh3VK6.s:1580   .text:00000000000005d8 .L0 
     /tmp/ccCh3VK6.s:1582   .text:00000000000005dc .L0 
     /tmp/ccCh3VK6.s:1587   .text:00000000000005e0 .L0 
     /tmp/ccCh3VK6.s:1590   .text:00000000000005e4 .L0 
     /tmp/ccCh3VK6.s:1591   .text:00000000000005e4 .L0 
     /tmp/ccCh3VK6.s:1595   .text:00000000000005f4 .L0 
     /tmp/ccCh3VK6.s:1596   .text:00000000000005f4 .L0 
     /tmp/ccCh3VK6.s:1598   .text:00000000000005f8 .L0 
     /tmp/ccCh3VK6.s:1600   .text:00000000000005fc .L0 
     /tmp/ccCh3VK6.s:1602   .text:0000000000000600 .L0 
     /tmp/ccCh3VK6.s:1603   .text:0000000000000600 .L0 
     /tmp/ccCh3VK6.s:1610   .text:0000000000000610 .L0 
     /tmp/ccCh3VK6.s:1613   .text:0000000000000610 .L0 
     /tmp/ccCh3VK6.s:1614   .text:0000000000000610 .L0 
     /tmp/ccCh3VK6.s:1621   .text:000000000000062c .L0 
     /tmp/ccCh3VK6.s:1622   .text:000000000000062c .L0 
     /tmp/ccCh3VK6.s:1624   .text:0000000000000630 .L0 
     /tmp/ccCh3VK6.s:1627   .text:0000000000000634 .L0 
     /tmp/ccCh3VK6.s:1630   .text:0000000000000638 .L0 
     /tmp/ccCh3VK6.s:1631   .text:0000000000000638 .L0 
     /tmp/ccCh3VK6.s:1633   .text:000000000000063c .L0 
     /tmp/ccCh3VK6.s:1636   .text:0000000000000640 .L0 
     /tmp/ccCh3VK6.s:1637   .text:0000000000000640 .L0 
     /tmp/ccCh3VK6.s:1638   .text:0000000000000640 .L0 
     /tmp/ccCh3VK6.s:1641   .text:0000000000000648 .L0 
     /tmp/ccCh3VK6.s:1646   .text:0000000000000650 .L0 
     /tmp/ccCh3VK6.s:1647   .text:0000000000000650 .L0 
     /tmp/ccCh3VK6.s:1655   .text:000000000000065c .L0 
     /tmp/ccCh3VK6.s:1656   .text:000000000000065c .L0 
     /tmp/ccCh3VK6.s:1658   .text:0000000000000660 .L0 
     /tmp/ccCh3VK6.s:1663   .text:0000000000000664 .L0 
     /tmp/ccCh3VK6.s:1673   .text:0000000000000668 .L0 
     /tmp/ccCh3VK6.s:1681   .text:0000000000000668 .L0 
     /tmp/ccCh3VK6.s:1682   .text:0000000000000668 .L0 
     /tmp/ccCh3VK6.s:1685   .text:0000000000000670 .L0 
     /tmp/ccCh3VK6.s:1688   .text:000000000000067c .L0 
     /tmp/ccCh3VK6.s:1690   .text:0000000000000680 .L0 
     /tmp/ccCh3VK6.s:1691   .text:0000000000000680 .L0 
     /tmp/ccCh3VK6.s:1693   .text:0000000000000684 .L0 
     /tmp/ccCh3VK6.s:1696   .text:0000000000000688 .L0 
     /tmp/ccCh3VK6.s:1703   .text:000000000000068c .L0 
     /tmp/ccCh3VK6.s:1712   .text:000000000000068c .L0 
     /tmp/ccCh3VK6.s:44     .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccCh3VK6.s:229    .text:00000000000000d0 .L0 
     /tmp/ccCh3VK6.s:47     .rodata.str1.8:0000000000000008 .LC1
     /tmp/ccCh3VK6.s:242    .text:00000000000000f8 .L0 
GAS LISTING /tmp/ccCh3VK6.s 			page 54


     /tmp/ccCh3VK6.s:50     .rodata.str1.8:0000000000000010 .LC2
     /tmp/ccCh3VK6.s:247    .text:0000000000000108 .L0 
     /tmp/ccCh3VK6.s:260    .text:0000000000000130 .L0 
     /tmp/ccCh3VK6.s:660    .text:000000000000022c .L0 
     /tmp/ccCh3VK6.s:679    .text:0000000000000250 .L0 
     /tmp/ccCh3VK6.s:740    .text:0000000000000270 .L0 
     /tmp/ccCh3VK6.s:953    .text:000000000000032c .L0 
     /tmp/ccCh3VK6.s:1244   .text:000000000000045c .L0 
     /tmp/ccCh3VK6.s:1262   .text:000000000000047c .L0 
     /tmp/ccCh3VK6.s:1288   .text:00000000000004a0 .L0 
     /tmp/ccCh3VK6.s:1412   .text:000000000000050c .L0 
     /tmp/ccCh3VK6.s:1419   .text:0000000000000520 .L0 
     /tmp/ccCh3VK6.s:1474   .text:0000000000000554 .L0 
     /tmp/ccCh3VK6.s:1547   .text:00000000000005a0 .L0 
     /tmp/ccCh3VK6.s:1565   .text:00000000000005c0 .L0 
     /tmp/ccCh3VK6.s:1591   .text:00000000000005e4 .L0 
     /tmp/ccCh3VK6.s:1616   .text:0000000000000618 .L0 
     /tmp/ccCh3VK6.s:1647   .text:0000000000000650 .L0 
     /tmp/ccCh3VK6.s:1685   .text:0000000000000670 .L0 
     /tmp/ccCh3VK6.s:268    .text:0000000000000144 .L46
     /tmp/ccCh3VK6.s:1371   .text:00000000000004f4 .L47
     /tmp/ccCh3VK6.s:1512   .text:000000000000057c .L48
     /tmp/ccCh3VK6.s:263    .text:0000000000000140 .L37
     /tmp/ccCh3VK6.s:753    .text:000000000000028c .L49
     /tmp/ccCh3VK6.s:843    .text:00000000000002c8 .L50
     /tmp/ccCh3VK6.s:873    .text:00000000000002e0 .L51
     /tmp/ccCh3VK6.s:926    .text:0000000000000318 .L52
     /tmp/ccCh3VK6.s:949    .text:000000000000032c .L53
     /tmp/ccCh3VK6.s:961    .text:0000000000000344 .L54
     /tmp/ccCh3VK6.s:1008   .text:0000000000000378 .L55
     /tmp/ccCh3VK6.s:1048   .text:00000000000003a0 .L56
     /tmp/ccCh3VK6.s:1088   .text:00000000000003c8 .L57
     /tmp/ccCh3VK6.s:1128   .text:00000000000003f0 .L58
     /tmp/ccCh3VK6.s:1172   .text:000000000000041c .L59
     /tmp/ccCh3VK6.s:1212   .text:0000000000000444 .L60
     /tmp/ccCh3VK6.s:1239   .text:000000000000045c .L61
     /tmp/ccCh3VK6.s:790    .text:00000000000002a0 .L6
     /tmp/ccCh3VK6.s:665    .text:0000000000000240 .L28
     /tmp/ccCh3VK6.s:920    .text:0000000000000310 .L38
     /tmp/ccCh3VK6.s:903    .text:0000000000000304 .L9
     /tmp/ccCh3VK6.s:1002   .text:0000000000000370 .L39
     /tmp/ccCh3VK6.s:985    .text:0000000000000364 .L13
     /tmp/ccCh3VK6.s:1038   .text:0000000000000390 .L62
     /tmp/ccCh3VK6.s:1022   .text:0000000000000384 .L15
     /tmp/ccCh3VK6.s:1078   .text:00000000000003b8 .L63
     /tmp/ccCh3VK6.s:1062   .text:00000000000003ac .L17
     /tmp/ccCh3VK6.s:1118   .text:00000000000003e0 .L64
     /tmp/ccCh3VK6.s:1102   .text:00000000000003d4 .L19
     /tmp/ccCh3VK6.s:1162   .text:000000000000040c .L65
     /tmp/ccCh3VK6.s:1146   .text:0000000000000400 .L21
     /tmp/ccCh3VK6.s:1202   .text:0000000000000434 .L66
     /tmp/ccCh3VK6.s:1186   .text:0000000000000428 .L23
     /tmp/ccCh3VK6.s:1347   .text:00000000000004d8 .L26
     /tmp/ccCh3VK6.s:1250   .text:0000000000000470 .L27
     /tmp/ccCh3VK6.s:823    .text:00000000000002b0 .L3
     /tmp/ccCh3VK6.s:1541   .text:00000000000005a0 .L67
     /tmp/ccCh3VK6.s:1628   .text:0000000000000638 .L33
GAS LISTING /tmp/ccCh3VK6.s 			page 55


     /tmp/ccCh3VK6.s:1553   .text:00000000000005b4 .L36
     /tmp/ccCh3VK6.s:1531   .text:0000000000000590 .L32
     /tmp/ccCh3VK6.s:1634   .text:0000000000000640 .L35
     /tmp/ccCh3VK6.s:4192   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccCh3VK6.s:6256   .debug_str:00000000000009ea .LASF212
     /tmp/ccCh3VK6.s:6312   .debug_str:0000000000000c1d .LASF213
     /tmp/ccCh3VK6.s:6014   .debug_str:000000000000034e .LASF214
     /tmp/ccCh3VK6.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccCh3VK6.s:1706   .text:000000000000068c .Letext0
     /tmp/ccCh3VK6.s:5898   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccCh3VK6.s:6036   .debug_str:0000000000000401 .LASF0
     /tmp/ccCh3VK6.s:6064   .debug_str:00000000000004f2 .LASF1
     /tmp/ccCh3VK6.s:6188   .debug_str:000000000000085e .LASF2
     /tmp/ccCh3VK6.s:6196   .debug_str:00000000000008a1 .LASF4
     /tmp/ccCh3VK6.s:6048   .debug_str:0000000000000454 .LASF3
     /tmp/ccCh3VK6.s:5914   .debug_str:0000000000000079 .LASF5
     /tmp/ccCh3VK6.s:6158   .debug_str:0000000000000795 .LASF6
     /tmp/ccCh3VK6.s:6146   .debug_str:0000000000000734 .LASF7
     /tmp/ccCh3VK6.s:6056   .debug_str:00000000000004af .LASF8
     /tmp/ccCh3VK6.s:6010   .debug_str:000000000000032a .LASF9
     /tmp/ccCh3VK6.s:6020   .debug_str:0000000000000394 .LASF10
     /tmp/ccCh3VK6.s:5954   .debug_str:00000000000001a0 .LASF11
     /tmp/ccCh3VK6.s:6000   .debug_str:00000000000002cc .LASF12
     /tmp/ccCh3VK6.s:5970   .debug_str:0000000000000213 .LASF13
     /tmp/ccCh3VK6.s:5952   .debug_str:0000000000000190 .LASF14
     /tmp/ccCh3VK6.s:6234   .debug_str:000000000000098a .LASF15
     /tmp/ccCh3VK6.s:5990   .debug_str:0000000000000280 .LASF16
     /tmp/ccCh3VK6.s:6222   .debug_str:000000000000094d .LASF17
     /tmp/ccCh3VK6.s:6298   .debug_str:0000000000000bb6 .LASF62
     /tmp/ccCh3VK6.s:6176   .debug_str:000000000000081e .LASF215
     /tmp/ccCh3VK6.s:6070   .debug_str:000000000000051f .LASF18
     /tmp/ccCh3VK6.s:5994   .debug_str:000000000000029c .LASF19
     /tmp/ccCh3VK6.s:6314   .debug_str:0000000000000c2b .LASF20
     /tmp/ccCh3VK6.s:6028   .debug_str:00000000000003b9 .LASF53
     /tmp/ccCh3VK6.s:6032   .debug_str:00000000000003d6 .LASF55
     /tmp/ccCh3VK6.s:6282   .debug_str:0000000000000b53 .LASF21
     /tmp/ccCh3VK6.s:6274   .debug_str:0000000000000b17 .LASF23
     /tmp/ccCh3VK6.s:6184   .debug_str:000000000000084a .LASF25
     /tmp/ccCh3VK6.s:6126   .debug_str:00000000000006a4 .LASF27
     /tmp/ccCh3VK6.s:6168   .debug_str:00000000000007dc .LASF22
     /tmp/ccCh3VK6.s:6172   .debug_str:00000000000007f7 .LASF24
     /tmp/ccCh3VK6.s:6116   .debug_str:000000000000066a .LASF26
     /tmp/ccCh3VK6.s:6058   .debug_str:00000000000004c2 .LASF28
     /tmp/ccCh3VK6.s:6310   .debug_str:0000000000000c15 .LASF29
     /tmp/ccCh3VK6.s:6260   .debug_str:0000000000000ab3 .LASF30
     /tmp/ccCh3VK6.s:6110   .debug_str:0000000000000654 .LASF31
     /tmp/ccCh3VK6.s:6124   .debug_str:0000000000000690 .LASF32
     /tmp/ccCh3VK6.s:6076   .debug_str:0000000000000550 .LASF33
     /tmp/ccCh3VK6.s:6174   .debug_str:000000000000080a .LASF34
     /tmp/ccCh3VK6.s:6336   .debug_str:0000000000000cc9 .LASF35
     /tmp/ccCh3VK6.s:6044   .debug_str:0000000000000438 .LASF36
     /tmp/ccCh3VK6.s:6230   .debug_str:0000000000000976 .LASF37
     /tmp/ccCh3VK6.s:6200   .debug_str:00000000000008ad .LASF38
     /tmp/ccCh3VK6.s:6202   .debug_str:00000000000008c0 .LASF39
     /tmp/ccCh3VK6.s:5960   .debug_str:00000000000001cb .LASF40
     /tmp/ccCh3VK6.s:5986   .debug_str:000000000000026e .LASF41
     /tmp/ccCh3VK6.s:6030   .debug_str:00000000000003c4 .LASF42
GAS LISTING /tmp/ccCh3VK6.s 			page 56


     /tmp/ccCh3VK6.s:6042   .debug_str:0000000000000432 .LASF43
     /tmp/ccCh3VK6.s:5980   .debug_str:000000000000024e .LASF44
     /tmp/ccCh3VK6.s:5916   .debug_str:0000000000000080 .LASF45
     /tmp/ccCh3VK6.s:6192   .debug_str:0000000000000879 .LASF46
     /tmp/ccCh3VK6.s:6186   .debug_str:0000000000000853 .LASF47
     /tmp/ccCh3VK6.s:6332   .debug_str:0000000000000ca4 .LASF48
     /tmp/ccCh3VK6.s:6300   .debug_str:0000000000000bbc .LASF49
     /tmp/ccCh3VK6.s:6320   .debug_str:0000000000000c4d .LASF50
     /tmp/ccCh3VK6.s:6296   .debug_str:0000000000000bac .LASF51
     /tmp/ccCh3VK6.s:6096   .debug_str:00000000000005ce .LASF52
     /tmp/ccCh3VK6.s:6308   .debug_str:0000000000000c06 .LASF54
     /tmp/ccCh3VK6.s:6018   .debug_str:0000000000000378 .LASF56
     /tmp/ccCh3VK6.s:6152   .debug_str:0000000000000761 .LASF66
     /tmp/ccCh3VK6.s:6054   .debug_str:000000000000048d .LASF68
     /tmp/ccCh3VK6.s:6252   .debug_str:00000000000009da .LASF78
     /tmp/ccCh3VK6.s:5956   .debug_str:00000000000001af .LASF57
     /tmp/ccCh3VK6.s:5930   .debug_str:00000000000000fb .LASF58
     /tmp/ccCh3VK6.s:6166   .debug_str:00000000000007d7 .LASF59
     /tmp/ccCh3VK6.s:6062   .debug_str:00000000000004ed .LASF60
     /tmp/ccCh3VK6.s:6086   .debug_str:0000000000000585 .LASF61
     /tmp/ccCh3VK6.s:6138   .debug_str:00000000000006f1 .LASF63
     /tmp/ccCh3VK6.s:6022   .debug_str:00000000000003a2 .LASF64
     /tmp/ccCh3VK6.s:6128   .debug_str:00000000000006b9 .LASF65
     /tmp/ccCh3VK6.s:5936   .debug_str:0000000000000122 .LASF67
     /tmp/ccCh3VK6.s:6264   .debug_str:0000000000000ad1 .LASF69
     /tmp/ccCh3VK6.s:5988   .debug_str:0000000000000274 .LASF70
     /tmp/ccCh3VK6.s:5924   .debug_str:00000000000000cb .LASF71
     /tmp/ccCh3VK6.s:6098   .debug_str:00000000000005e4 .LASF72
     /tmp/ccCh3VK6.s:5918   .debug_str:000000000000008b .LASF74
     /tmp/ccCh3VK6.s:6242   .debug_str:00000000000009af .LASF73
     /tmp/ccCh3VK6.s:6100   .debug_str:00000000000005ee .LASF75
     /tmp/ccCh3VK6.s:6248   .debug_str:00000000000009c8 .LASF76
     /tmp/ccCh3VK6.s:6090   .debug_str:0000000000000597 .LASF77
     /tmp/ccCh3VK6.s:5962   .debug_str:00000000000001de .LASF79
     /tmp/ccCh3VK6.s:6198   .debug_str:00000000000008a8 .LASF80
     /tmp/ccCh3VK6.s:5912   .debug_str:000000000000006d .LASF81
     /tmp/ccCh3VK6.s:6244   .debug_str:00000000000009b8 .LASF84
     /tmp/ccCh3VK6.s:6108   .debug_str:000000000000063d .LASF86
     /tmp/ccCh3VK6.s:5938   .debug_str:0000000000000127 .LASF82
     /tmp/ccCh3VK6.s:6276   .debug_str:0000000000000b2c .LASF83
     /tmp/ccCh3VK6.s:6088   .debug_str:000000000000058a .LASF85
     /tmp/ccCh3VK6.s:6284   .debug_str:0000000000000b5c .LASF87
     /tmp/ccCh3VK6.s:6232   .debug_str:000000000000097d .LASF88
     /tmp/ccCh3VK6.s:6004   .debug_str:00000000000002e0 .LASF89
     /tmp/ccCh3VK6.s:6130   .debug_str:00000000000006be .LASF194
     /tmp/ccCh3VK6.s:6066   .debug_str:0000000000000505 .LASF90
     /tmp/ccCh3VK6.s:6182   .debug_str:000000000000083a .LASF91
     /tmp/ccCh3VK6.s:6254   .debug_str:00000000000009e2 .LASF216
     /tmp/ccCh3VK6.s:6218   .debug_str:0000000000000935 .LASF92
     /tmp/ccCh3VK6.s:6142   .debug_str:000000000000070b .LASF93
     /tmp/ccCh3VK6.s:5928   .debug_str:00000000000000f5 .LASF94
     /tmp/ccCh3VK6.s:6194   .debug_str:0000000000000891 .LASF95
     /tmp/ccCh3VK6.s:6078   .debug_str:0000000000000558 .LASF96
     /tmp/ccCh3VK6.s:6074   .debug_str:0000000000000541 .LASF97
     /tmp/ccCh3VK6.s:6334   .debug_str:0000000000000cbc .LASF98
     /tmp/ccCh3VK6.s:6016   .debug_str:000000000000036c .LASF99
     /tmp/ccCh3VK6.s:5946   .debug_str:0000000000000169 .LASF100
GAS LISTING /tmp/ccCh3VK6.s 			page 57


     /tmp/ccCh3VK6.s:6006   .debug_str:0000000000000302 .LASF101
     /tmp/ccCh3VK6.s:5906   .debug_str:0000000000000027 .LASF102
     /tmp/ccCh3VK6.s:6122   .debug_str:0000000000000683 .LASF103
     /tmp/ccCh3VK6.s:6220   .debug_str:000000000000093a .LASF104
     /tmp/ccCh3VK6.s:6190   .debug_str:000000000000086c .LASF105
     /tmp/ccCh3VK6.s:6164   .debug_str:00000000000007c0 .LASF217
     /tmp/ccCh3VK6.s:5904   .debug_str:0000000000000022 .LASF106
     /tmp/ccCh3VK6.s:6330   .debug_str:0000000000000c9e .LASF107
     /tmp/ccCh3VK6.s:6272   .debug_str:0000000000000b0f .LASF108
     /tmp/ccCh3VK6.s:6262   .debug_str:0000000000000ac7 .LASF109
     /tmp/ccCh3VK6.s:6240   .debug_str:00000000000009a6 .LASF110
     /tmp/ccCh3VK6.s:6140   .debug_str:0000000000000701 .LASF111
     /tmp/ccCh3VK6.s:5944   .debug_str:000000000000015b .LASF112
     /tmp/ccCh3VK6.s:6072   .debug_str:0000000000000528 .LASF113
     /tmp/ccCh3VK6.s:6134   .debug_str:00000000000006d0 .LASF114
     /tmp/ccCh3VK6.s:5972   .debug_str:0000000000000223 .LASF174
     /tmp/ccCh3VK6.s:5910   .debug_str:0000000000000045 .LASF175
     /tmp/ccCh3VK6.s:5982   .debug_str:0000000000000260 .LASF115
     /tmp/ccCh3VK6.s:5964   .debug_str:00000000000001e6 .LASF116
     /tmp/ccCh3VK6.s:6038   .debug_str:000000000000040e .LASF117
     /tmp/ccCh3VK6.s:6206   .debug_str:00000000000008d1 .LASF118
     /tmp/ccCh3VK6.s:6178   .debug_str:0000000000000829 .LASF119
     /tmp/ccCh3VK6.s:5902   .debug_str:0000000000000019 .LASF120
     /tmp/ccCh3VK6.s:6204   .debug_str:00000000000008c7 .LASF121
     /tmp/ccCh3VK6.s:5940   .debug_str:0000000000000133 .LASF122
     /tmp/ccCh3VK6.s:5908   .debug_str:0000000000000037 .LASF123
     /tmp/ccCh3VK6.s:5974   .debug_str:0000000000000231 .LASF124
     /tmp/ccCh3VK6.s:6338   .debug_str:0000000000000cd1 .LASF125
     /tmp/ccCh3VK6.s:6132   .debug_str:00000000000006c3 .LASF126
     /tmp/ccCh3VK6.s:6326   .debug_str:0000000000000c88 .LASF127
     /tmp/ccCh3VK6.s:6002   .debug_str:00000000000002db .LASF128
     /tmp/ccCh3VK6.s:6118   .debug_str:0000000000000671 .LASF129
     /tmp/ccCh3VK6.s:6170   .debug_str:00000000000007e3 .LASF130
     /tmp/ccCh3VK6.s:6278   .debug_str:0000000000000b43 .LASF131
     /tmp/ccCh3VK6.s:5922   .debug_str:00000000000000c0 .LASF132
     /tmp/ccCh3VK6.s:6290   .debug_str:0000000000000b7f .LASF133
     /tmp/ccCh3VK6.s:5926   .debug_str:00000000000000ef .LASF134
     /tmp/ccCh3VK6.s:5932   .debug_str:0000000000000100 .LASF135
     /tmp/ccCh3VK6.s:5984   .debug_str:0000000000000269 .LASF136
     /tmp/ccCh3VK6.s:5958   .debug_str:00000000000001b4 .LASF137
     /tmp/ccCh3VK6.s:6238   .debug_str:000000000000099f .LASF138
     /tmp/ccCh3VK6.s:6322   .debug_str:0000000000000c63 .LASF139
     /tmp/ccCh3VK6.s:5934   .debug_str:0000000000000118 .LASF140
     /tmp/ccCh3VK6.s:6008   .debug_str:000000000000030e .LASF141
     /tmp/ccCh3VK6.s:6294   .debug_str:0000000000000ba4 .LASF142
     /tmp/ccCh3VK6.s:6302   .debug_str:0000000000000bc6 .LASF143
     /tmp/ccCh3VK6.s:6082   .debug_str:0000000000000566 .LASF144
     /tmp/ccCh3VK6.s:6068   .debug_str:000000000000050b .LASF145
     /tmp/ccCh3VK6.s:6104   .debug_str:0000000000000621 .LASF146
     /tmp/ccCh3VK6.s:6212   .debug_str:0000000000000903 .LASF147
     /tmp/ccCh3VK6.s:6052   .debug_str:0000000000000486 .LASF148
     /tmp/ccCh3VK6.s:5942   .debug_str:0000000000000141 .LASF149
     /tmp/ccCh3VK6.s:6266   .debug_str:0000000000000aed .LASF150
     /tmp/ccCh3VK6.s:6144   .debug_str:000000000000071a .LASF151
     /tmp/ccCh3VK6.s:6250   .debug_str:00000000000009cd .LASF152
     /tmp/ccCh3VK6.s:6050   .debug_str:0000000000000466 .LASF153
     /tmp/ccCh3VK6.s:6012   .debug_str:000000000000033a .LASF154
GAS LISTING /tmp/ccCh3VK6.s 			page 58


     /tmp/ccCh3VK6.s:6214   .debug_str:0000000000000918 .LASF155
     /tmp/ccCh3VK6.s:5976   .debug_str:000000000000023d .LASF156
     /tmp/ccCh3VK6.s:6120   .debug_str:000000000000067e .LASF157
     /tmp/ccCh3VK6.s:6080   .debug_str:000000000000055d .LASF158
     /tmp/ccCh3VK6.s:5968   .debug_str:000000000000020c .LASF159
     /tmp/ccCh3VK6.s:6228   .debug_str:0000000000000971 .LASF160
     /tmp/ccCh3VK6.s:6112   .debug_str:000000000000065c .LASF161
     /tmp/ccCh3VK6.s:5998   .debug_str:00000000000002bd .LASF162
     /tmp/ccCh3VK6.s:6094   .debug_str:00000000000005c0 .LASF163
     /tmp/ccCh3VK6.s:6136   .debug_str:00000000000006e0 .LASF164
     /tmp/ccCh3VK6.s:6024   .debug_str:00000000000003a7 .LASF165
     /tmp/ccCh3VK6.s:6216   .debug_str:0000000000000924 .LASF166
     /tmp/ccCh3VK6.s:6034   .debug_str:00000000000003ee .LASF218
     /tmp/ccCh3VK6.s:6160   .debug_str:000000000000079c .LASF219
     /tmp/ccCh3VK6.s:6224   .debug_str:0000000000000963 .LASF167
     /tmp/ccCh3VK6.s:6040   .debug_str:000000000000041b .LASF168
     /tmp/ccCh3VK6.s:6046   .debug_str:000000000000044c .LASF169
     /tmp/ccCh3VK6.s:5996   .debug_str:00000000000002a5 .LASF170
     /tmp/ccCh3VK6.s:6162   .debug_str:00000000000007af .LASF171
     /tmp/ccCh3VK6.s:6150   .debug_str:0000000000000750 .LASF172
     /tmp/ccCh3VK6.s:6304   .debug_str:0000000000000be0 .LASF173
     /tmp/ccCh3VK6.s:5950   .debug_str:000000000000017e .LASF176
     /tmp/ccCh3VK6.s:6246   .debug_str:00000000000009c3 .LASF177
     /tmp/ccCh3VK6.s:6328   .debug_str:0000000000000c95 .LASF178
     /tmp/ccCh3VK6.s:5992   .debug_str:0000000000000296 .LASF179
     /tmp/ccCh3VK6.s:6106   .debug_str:0000000000000636 .LASF180
     /tmp/ccCh3VK6.s:6270   .debug_str:0000000000000afe .LASF181
     /tmp/ccCh3VK6.s:6156   .debug_str:0000000000000784 .LASF182
     /tmp/ccCh3VK6.s:6102   .debug_str:000000000000060f .LASF183
     /tmp/ccCh3VK6.s:6210   .debug_str:00000000000008f1 .LASF184
     /tmp/ccCh3VK6.s:5920   .debug_str:00000000000000ac .LASF185
     /tmp/ccCh3VK6.s:6114   .debug_str:0000000000000661 .LASF186
     /tmp/ccCh3VK6.s:6060   .debug_str:00000000000004d5 .LASF187
     /tmp/ccCh3VK6.s:6268   .debug_str:0000000000000af4 .LASF188
     /tmp/ccCh3VK6.s:5900   .debug_str:0000000000000000 .LASF189
     /tmp/ccCh3VK6.s:6316   .debug_str:0000000000000c34 .LASF190
     /tmp/ccCh3VK6.s:6306   .debug_str:0000000000000bf2 .LASF191
     /tmp/ccCh3VK6.s:6092   .debug_str:00000000000005bb .LASF192
     /tmp/ccCh3VK6.s:6318   .debug_str:0000000000000c39 .LASF193
     /tmp/ccCh3VK6.s:57     .text:0000000000000020 .LFB57
     /tmp/ccCh3VK6.s:1704   .text:000000000000068c .LFE57
     /tmp/ccCh3VK6.s:6286   .debug_str:0000000000000b75 .LASF195
     /tmp/ccCh3VK6.s:6226   .debug_str:000000000000096a .LASF196
     /tmp/ccCh3VK6.s:5227   .debug_loc:0000000000000000 .LLST0
     /tmp/ccCh3VK6.s:5774   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccCh3VK6.s:6258   .debug_str:0000000000000aae .LASF197
     /tmp/ccCh3VK6.s:6026   .debug_str:00000000000003b1 .LASF198
     /tmp/ccCh3VK6.s:768    .text:000000000000028c .LBB308
     /tmp/ccCh3VK6.s:791    .text:00000000000002a0 .LBE308
     /tmp/ccCh3VK6.s:5360   .debug_loc:00000000000001eb .LLST35
     /tmp/ccCh3VK6.s:5948   .debug_str:0000000000000179 .LASF199
     /tmp/ccCh3VK6.s:5367   .debug_loc:000000000000020e .LLST36
     /tmp/ccCh3VK6.s:776    .text:0000000000000298 .LVL15
     /tmp/ccCh3VK6.s:849    .text:00000000000002c8 .LBB292
     /tmp/ccCh3VK6.s:870    .text:00000000000002dc .LBE292
     /tmp/ccCh3VK6.s:5374   .debug_loc:0000000000000231 .LLST33
     /tmp/ccCh3VK6.s:6292   .debug_str:0000000000000b9d .LASF200
GAS LISTING /tmp/ccCh3VK6.s 			page 59


     /tmp/ccCh3VK6.s:5381   .debug_loc:0000000000000254 .LLST34
     /tmp/ccCh3VK6.s:857    .text:00000000000002d4 .LVL23
     /tmp/ccCh3VK6.s:6180   .debug_str:0000000000000833 .LASF201
     /tmp/ccCh3VK6.s:5388   .debug_loc:0000000000000277 .LLST28
     /tmp/ccCh3VK6.s:5395   .debug_loc:000000000000029a .LLST29
     /tmp/ccCh3VK6.s:5402   .debug_loc:00000000000002bd .LLST30
     /tmp/ccCh3VK6.s:5409   .debug_loc:00000000000002e0 .LLST31
     /tmp/ccCh3VK6.s:5416   .debug_loc:0000000000000303 .LLST32
     /tmp/ccCh3VK6.s:896    .text:00000000000002f8 .LVL29
     /tmp/ccCh3VK6.s:929    .text:0000000000000318 .LBB262
     /tmp/ccCh3VK6.s:946    .text:0000000000000328 .LBE262
     /tmp/ccCh3VK6.s:5433   .debug_loc:000000000000034e .LLST27
     /tmp/ccCh3VK6.s:933    .text:0000000000000320 .LVL33
     /tmp/ccCh3VK6.s:5440   .debug_loc:0000000000000371 .LLST24
     /tmp/ccCh3VK6.s:5447   .debug_loc:0000000000000394 .LLST25
     /tmp/ccCh3VK6.s:5454   .debug_loc:00000000000003b7 .LLST26
     /tmp/ccCh3VK6.s:976    .text:0000000000000358 .LVL39
     /tmp/ccCh3VK6.s:5471   .debug_loc:0000000000000402 .LLST22
     /tmp/ccCh3VK6.s:5482   .debug_loc:0000000000000438 .LLST23
     /tmp/ccCh3VK6.s:1043   .text:0000000000000398 .LVL47
     /tmp/ccCh3VK6.s:5503   .debug_loc:0000000000000496 .LLST20
     /tmp/ccCh3VK6.s:5514   .debug_loc:00000000000004cc .LLST21
     /tmp/ccCh3VK6.s:1083   .text:00000000000003c0 .LVL53
     /tmp/ccCh3VK6.s:5535   .debug_loc:000000000000052a .LLST18
     /tmp/ccCh3VK6.s:5546   .debug_loc:0000000000000560 .LLST19
     /tmp/ccCh3VK6.s:1123   .text:00000000000003e8 .LVL59
     /tmp/ccCh3VK6.s:5567   .debug_loc:00000000000005be .LLST15
     /tmp/ccCh3VK6.s:5578   .debug_loc:00000000000005f4 .LLST16
     /tmp/ccCh3VK6.s:5589   .debug_loc:000000000000062a .LLST17
     /tmp/ccCh3VK6.s:1167   .text:0000000000000414 .LVL66
     /tmp/ccCh3VK6.s:5610   .debug_loc:0000000000000688 .LLST13
     /tmp/ccCh3VK6.s:5621   .debug_loc:00000000000006be .LLST14
     /tmp/ccCh3VK6.s:1207   .text:000000000000043c .LVL72
     /tmp/ccCh3VK6.s:1215   .text:0000000000000444 .LBB181
     /tmp/ccCh3VK6.s:1236   .text:0000000000000458 .LBE181
     /tmp/ccCh3VK6.s:6280   .debug_str:0000000000000b4e .LASF202
     /tmp/ccCh3VK6.s:5642   .debug_loc:000000000000071c .LLST11
     /tmp/ccCh3VK6.s:5649   .debug_loc:000000000000073f .LLST12
     /tmp/ccCh3VK6.s:1223   .text:0000000000000450 .LVL76
     /tmp/ccCh3VK6.s:1338   .text:00000000000004cc .LVL81
     /tmp/ccCh3VK6.s:1258   .text:000000000000047c .LBB172
     /tmp/ccCh3VK6.s:1266   .text:0000000000000488 .LBE172
     /tmp/ccCh3VK6.s:1267   .text:0000000000000488 .LBB174
     /tmp/ccCh3VK6.s:1282   .text:000000000000049c .LBE174
     /tmp/ccCh3VK6.s:5656   .debug_loc:0000000000000762 .LLST10
     /tmp/ccCh3VK6.s:1351   .text:00000000000004e0 .LVL82
     /tmp/ccCh3VK6.s:5663   .debug_loc:0000000000000785 .LLST9
     /tmp/ccCh3VK6.s:738    .text:0000000000000270 .LVL12
     /tmp/ccCh3VK6.s:674    .text:0000000000000250 .LBB163
     /tmp/ccCh3VK6.s:683    .text:000000000000025c .LBE163
     /tmp/ccCh3VK6.s:684    .text:000000000000025c .LBB165
     /tmp/ccCh3VK6.s:694    .text:0000000000000264 .LBE165
     /tmp/ccCh3VK6.s:5670   .debug_loc:00000000000007a8 .LLST8
     /tmp/ccCh3VK6.s:657    .text:000000000000022c .LVL9
     /tmp/ccCh3VK6.s:274    .text:0000000000000144 .LBB144
     /tmp/ccCh3VK6.s:289    .text:0000000000000150 .LBE144
     /tmp/ccCh3VK6.s:295    .text:0000000000000158 .LBB146
GAS LISTING /tmp/ccCh3VK6.s 			page 60


     /tmp/ccCh3VK6.s:310    .text:0000000000000164 .LBE146
     /tmp/ccCh3VK6.s:797    .text:00000000000002a4 .LBB325
     /tmp/ccCh3VK6.s:808    .text:00000000000002a8 .LBE325
     /tmp/ccCh3VK6.s:5677   .debug_loc:00000000000007cb .LLST37
     /tmp/ccCh3VK6.s:813    .text:00000000000002ac .LBB327
     /tmp/ccCh3VK6.s:825    .text:00000000000002b0 .LBE327
     /tmp/ccCh3VK6.s:5684   .debug_loc:00000000000007ee .LLST38
     /tmp/ccCh3VK6.s:958    .text:0000000000000340 .LVL35
     /tmp/ccCh3VK6.s:1433   .text:0000000000000534 .LBB131
     /tmp/ccCh3VK6.s:1515   .text:000000000000057c .LBE131
     /tmp/ccCh3VK6.s:1435   .text:0000000000000534 .LBB132
     /tmp/ccCh3VK6.s:1450   .text:0000000000000540 .LBE132
     /tmp/ccCh3VK6.s:1454   .text:0000000000000544 .LBB134
     /tmp/ccCh3VK6.s:1469   .text:0000000000000550 .LBE134
     /tmp/ccCh3VK6.s:1484   .text:000000000000056c .LBB136
     /tmp/ccCh3VK6.s:1495   .text:0000000000000570 .LBE136
     /tmp/ccCh3VK6.s:5691   .debug_loc:0000000000000811 .LLST6
     /tmp/ccCh3VK6.s:1500   .text:0000000000000574 .LBB138
     /tmp/ccCh3VK6.s:1514   .text:000000000000057c .LBE138
     /tmp/ccCh3VK6.s:5698   .debug_loc:0000000000000834 .LLST7
     /tmp/ccCh3VK6.s:1479   .text:0000000000000568 .LVL89
     /tmp/ccCh3VK6.s:5705   .debug_loc:0000000000000857 .LLST1
     /tmp/ccCh3VK6.s:1588   .text:00000000000005e4 .LBB111
     /tmp/ccCh3VK6.s:1625   .text:0000000000000634 .LBE111
     /tmp/ccCh3VK6.s:1608   .text:0000000000000610 .LBB112
     /tmp/ccCh3VK6.s:1612   .text:0000000000000610 .LBE112
     /tmp/ccCh3VK6.s:1606   .text:0000000000000610 .LVL102
     /tmp/ccCh3VK6.s:1619   .text:000000000000062c .LVL103
     /tmp/ccCh3VK6.s:1683   .text:0000000000000670 .LVL106
     /tmp/ccCh3VK6.s:1561   .text:00000000000005c0 .LBB107
     /tmp/ccCh3VK6.s:1569   .text:00000000000005cc .LBE107
     /tmp/ccCh3VK6.s:1570   .text:00000000000005cc .LBB109
     /tmp/ccCh3VK6.s:1585   .text:00000000000005e0 .LBE109
     /tmp/ccCh3VK6.s:5732   .debug_loc:000000000000089d .LLST2
     /tmp/ccCh3VK6.s:1643   .text:0000000000000650 .LBB114
     /tmp/ccCh3VK6.s:1651   .text:000000000000065c .LBE114
     /tmp/ccCh3VK6.s:1652   .text:000000000000065c .LBB116
     /tmp/ccCh3VK6.s:1661   .text:0000000000000664 .LBE116
     /tmp/ccCh3VK6.s:5739   .debug_loc:00000000000008c0 .LLST3
     /tmp/ccCh3VK6.s:1523   .text:0000000000000584 .LVL94
     /tmp/ccCh3VK6.s:1537   .text:000000000000059c .LVL97
     /tmp/ccCh3VK6.s:188    .text:00000000000000b0 .LBB99
     /tmp/ccCh3VK6.s:269    .text:0000000000000144 .LBE99
     /tmp/ccCh3VK6.s:190    .text:00000000000000b0 .LBB100
     /tmp/ccCh3VK6.s:205    .text:00000000000000bc .LBE100
     /tmp/ccCh3VK6.s:209    .text:00000000000000c0 .LBB102
     /tmp/ccCh3VK6.s:224    .text:00000000000000cc .LBE102
     /tmp/ccCh3VK6.s:231    .text:00000000000000e0 .LVL1
     /tmp/ccCh3VK6.s:239    .text:00000000000000f8 .LVL2
     /tmp/ccCh3VK6.s:244    .text:0000000000000108 .LVL3
     /tmp/ccCh3VK6.s:249    .text:0000000000000118 .LVL4
     /tmp/ccCh3VK6.s:257    .text:0000000000000130 .LVL5
     /tmp/ccCh3VK6.s:262    .text:0000000000000140 .LVL6
     /tmp/ccCh3VK6.s:145    .text:0000000000000078 .LBB94
     /tmp/ccCh3VK6.s:162    .text:0000000000000084 .LBE94
     /tmp/ccCh3VK6.s:1389   .text:00000000000004f4 .LBB126
     /tmp/ccCh3VK6.s:1401   .text:00000000000004fc .LBE126
GAS LISTING /tmp/ccCh3VK6.s 			page 61


     /tmp/ccCh3VK6.s:5746   .debug_loc:00000000000008e3 .LLST4
     /tmp/ccCh3VK6.s:1422   .text:000000000000052c .LBB129
     /tmp/ccCh3VK6.s:1430   .text:0000000000000530 .LBE129
     /tmp/ccCh3VK6.s:5754   .debug_loc:0000000000000907 .LLST5
     /tmp/ccCh3VK6.s:1405   .text:0000000000000504 .LVL85
     /tmp/ccCh3VK6.s:1409   .text:000000000000050c .LVL86
     /tmp/ccCh3VK6.s:10     .text:0000000000000000 .LFB56
     /tmp/ccCh3VK6.s:40     .text:0000000000000020 .LFE56
     /tmp/ccCh3VK6.s:5978   .debug_str:0000000000000249 .LASF203
     /tmp/ccCh3VK6.s:6288   .debug_str:0000000000000b7a .LASF204
     /tmp/ccCh3VK6.s:6236   .debug_str:0000000000000996 .LASF205
     /tmp/ccCh3VK6.s:6084   .debug_str:000000000000057a .LASF206
     /tmp/ccCh3VK6.s:6154   .debug_str:0000000000000776 .LASF207
     /tmp/ccCh3VK6.s:5966   .debug_str:00000000000001f9 .LASF208
     /tmp/ccCh3VK6.s:6324   .debug_str:0000000000000c7c .LASF209
     /tmp/ccCh3VK6.s:6208   .debug_str:00000000000008e2 .LASF210
     /tmp/ccCh3VK6.s:6148   .debug_str:0000000000000747 .LASF211
     /tmp/ccCh3VK6.s:160    .text:0000000000000084 .LVL0
     /tmp/ccCh3VK6.s:267    .text:0000000000000144 .LVL7
     /tmp/ccCh3VK6.s:317    .text:000000000000016c .LVL8
     /tmp/ccCh3VK6.s:752    .text:000000000000028c .LVL13
     /tmp/ccCh3VK6.s:842    .text:00000000000002c8 .LVL21
     /tmp/ccCh3VK6.s:872    .text:00000000000002e0 .LVL24
     /tmp/ccCh3VK6.s:925    .text:0000000000000318 .LVL32
     /tmp/ccCh3VK6.s:948    .text:000000000000032c .LVL34
     /tmp/ccCh3VK6.s:960    .text:0000000000000344 .LVL36
     /tmp/ccCh3VK6.s:1007   .text:0000000000000378 .LVL43
     /tmp/ccCh3VK6.s:1021   .text:0000000000000384 .LVL45
     /tmp/ccCh3VK6.s:1037   .text:0000000000000390 .LVL46
     /tmp/ccCh3VK6.s:1047   .text:00000000000003a0 .LVL49
     /tmp/ccCh3VK6.s:1061   .text:00000000000003ac .LVL51
     /tmp/ccCh3VK6.s:1077   .text:00000000000003b8 .LVL52
     /tmp/ccCh3VK6.s:1087   .text:00000000000003c8 .LVL55
     /tmp/ccCh3VK6.s:1101   .text:00000000000003d4 .LVL57
     /tmp/ccCh3VK6.s:1117   .text:00000000000003e0 .LVL58
     /tmp/ccCh3VK6.s:1127   .text:00000000000003f0 .LVL61
     /tmp/ccCh3VK6.s:1145   .text:0000000000000400 .LVL64
     /tmp/ccCh3VK6.s:1161   .text:000000000000040c .LVL65
     /tmp/ccCh3VK6.s:1171   .text:000000000000041c .LVL68
     /tmp/ccCh3VK6.s:1185   .text:0000000000000428 .LVL70
     /tmp/ccCh3VK6.s:1201   .text:0000000000000434 .LVL71
     /tmp/ccCh3VK6.s:1211   .text:0000000000000444 .LVL74
     /tmp/ccCh3VK6.s:1238   .text:000000000000045c .LVL77
     /tmp/ccCh3VK6.s:1249   .text:0000000000000470 .LVL78
     /tmp/ccCh3VK6.s:1370   .text:00000000000004f4 .LVL83
     /tmp/ccCh3VK6.s:1511   .text:000000000000057c .LVL93
     /tmp/ccCh3VK6.s:772    .text:0000000000000290 .LVL14
     /tmp/ccCh3VK6.s:788    .text:00000000000002a0 .LVL16
     /tmp/ccCh3VK6.s:853    .text:00000000000002cc .LVL22
     /tmp/ccCh3VK6.s:879    .text:00000000000002e4 .LVL25
     /tmp/ccCh3VK6.s:883    .text:00000000000002e8 .LVL26
     /tmp/ccCh3VK6.s:887    .text:00000000000002ec .LVL27
     /tmp/ccCh3VK6.s:891    .text:00000000000002f0 .LVL28
     /tmp/ccCh3VK6.s:904    .text:0000000000000304 .LVL30
     /tmp/ccCh3VK6.s:919    .text:0000000000000310 .LVL31
     /tmp/ccCh3VK6.s:967    .text:0000000000000348 .LVL37
     /tmp/ccCh3VK6.s:971    .text:000000000000034c .LVL38
GAS LISTING /tmp/ccCh3VK6.s 			page 62


     /tmp/ccCh3VK6.s:980    .text:000000000000035c .LVL40
     /tmp/ccCh3VK6.s:986    .text:0000000000000364 .LVL41
     /tmp/ccCh3VK6.s:1001   .text:0000000000000370 .LVL42
     /tmp/ccCh3VK6.s:1015   .text:000000000000037c .LVL44
     /tmp/ccCh3VK6.s:1045   .text:000000000000039c .LVL48
     /tmp/ccCh3VK6.s:1055   .text:00000000000003a4 .LVL50
     /tmp/ccCh3VK6.s:1085   .text:00000000000003c4 .LVL54
     /tmp/ccCh3VK6.s:1095   .text:00000000000003cc .LVL56
     /tmp/ccCh3VK6.s:1125   .text:00000000000003ec .LVL60
     /tmp/ccCh3VK6.s:1135   .text:00000000000003f4 .LVL62
     /tmp/ccCh3VK6.s:1139   .text:00000000000003f8 .LVL63
     /tmp/ccCh3VK6.s:1169   .text:0000000000000418 .LVL67
     /tmp/ccCh3VK6.s:1179   .text:0000000000000420 .LVL69
     /tmp/ccCh3VK6.s:1209   .text:0000000000000440 .LVL73
     /tmp/ccCh3VK6.s:1219   .text:0000000000000448 .LVL75
     /tmp/ccCh3VK6.s:1264   .text:0000000000000488 .LVL79
     /tmp/ccCh3VK6.s:1280   .text:000000000000049c .LVL80
     /tmp/ccCh3VK6.s:681    .text:000000000000025c .LVL10
     /tmp/ccCh3VK6.s:692    .text:0000000000000264 .LVL11
     /tmp/ccCh3VK6.s:796    .text:00000000000002a4 .LVL17
     /tmp/ccCh3VK6.s:805    .text:00000000000002a8 .LVL18
     /tmp/ccCh3VK6.s:812    .text:00000000000002ac .LVL19
     /tmp/ccCh3VK6.s:821    .text:00000000000002b0 .LVL20
     /tmp/ccCh3VK6.s:1483   .text:000000000000056c .LVL90
     /tmp/ccCh3VK6.s:1492   .text:0000000000000570 .LVL91
     /tmp/ccCh3VK6.s:1499   .text:0000000000000574 .LVL92
     /tmp/ccCh3VK6.s:1525   .text:0000000000000588 .LVL95
     /tmp/ccCh3VK6.s:1530   .text:0000000000000590 .LVL96
     /tmp/ccCh3VK6.s:1540   .text:00000000000005a0 .LVL98
     /tmp/ccCh3VK6.s:1552   .text:00000000000005b4 .LVL99
     /tmp/ccCh3VK6.s:1567   .text:00000000000005cc .LVL100
     /tmp/ccCh3VK6.s:1583   .text:00000000000005e0 .LVL101
     /tmp/ccCh3VK6.s:1649   .text:000000000000065c .LVL104
     /tmp/ccCh3VK6.s:1659   .text:0000000000000664 .LVL105
     /tmp/ccCh3VK6.s:1398   .text:00000000000004fc .LVL84
     /tmp/ccCh3VK6.s:1421   .text:000000000000052c .LVL87
     /tmp/ccCh3VK6.s:1428   .text:0000000000000530 .LVL88
     /tmp/ccCh3VK6.s:1713   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccCh3VK6.s:1519   .text:000000000000057c .LBB104
     /tmp/ccCh3VK6.s:1538   .text:000000000000059c .LBE104
     /tmp/ccCh3VK6.s:1542   .text:00000000000005a0 .LBB123
     /tmp/ccCh3VK6.s:1669   .text:0000000000000668 .LBE123
     /tmp/ccCh3VK6.s:1677   .text:0000000000000668 .LBB124
     /tmp/ccCh3VK6.s:1699   .text:000000000000068c .LBE124
     /tmp/ccCh3VK6.s:1544   .text:00000000000005a0 .LBB106
     /tmp/ccCh3VK6.s:1667   .text:0000000000000668 .LBE106
     /tmp/ccCh3VK6.s:1679   .text:0000000000000668 .LBB120
     /tmp/ccCh3VK6.s:1697   .text:000000000000068c .LBE120
     /tmp/ccCh3VK6.s:1664   .text:0000000000000668 .LBB118
     /tmp/ccCh3VK6.s:1666   .text:0000000000000668 .LBE118
     /tmp/ccCh3VK6.s:1680   .text:0000000000000668 .LBB119
     /tmp/ccCh3VK6.s:1694   .text:0000000000000688 .LBE119
     /tmp/ccCh3VK6.s:272    .text:0000000000000144 .LBB143
     /tmp/ccCh3VK6.s:322    .text:0000000000000174 .LBE143
     /tmp/ccCh3VK6.s:326    .text:0000000000000174 .LBB331
     /tmp/ccCh3VK6.s:336    .text:0000000000000180 .LBE331
     /tmp/ccCh3VK6.s:340    .text:0000000000000180 .LBB332
GAS LISTING /tmp/ccCh3VK6.s 			page 63


     /tmp/ccCh3VK6.s:352    .text:000000000000018c .LBE332
     /tmp/ccCh3VK6.s:356    .text:000000000000018c .LBB333
     /tmp/ccCh3VK6.s:370    .text:0000000000000198 .LBE333
     /tmp/ccCh3VK6.s:374    .text:0000000000000198 .LBB334
     /tmp/ccCh3VK6.s:390    .text:00000000000001a4 .LBE334
     /tmp/ccCh3VK6.s:394    .text:00000000000001a4 .LBB335
     /tmp/ccCh3VK6.s:412    .text:00000000000001b0 .LBE335
     /tmp/ccCh3VK6.s:416    .text:00000000000001b0 .LBB336
     /tmp/ccCh3VK6.s:436    .text:00000000000001bc .LBE336
     /tmp/ccCh3VK6.s:440    .text:00000000000001bc .LBB337
     /tmp/ccCh3VK6.s:462    .text:00000000000001c8 .LBE337
     /tmp/ccCh3VK6.s:466    .text:00000000000001c8 .LBB338
     /tmp/ccCh3VK6.s:490    .text:00000000000001d4 .LBE338
     /tmp/ccCh3VK6.s:494    .text:00000000000001d4 .LBB339
     /tmp/ccCh3VK6.s:520    .text:00000000000001e0 .LBE339
     /tmp/ccCh3VK6.s:524    .text:00000000000001e0 .LBB340
     /tmp/ccCh3VK6.s:552    .text:00000000000001ec .LBE340
     /tmp/ccCh3VK6.s:556    .text:00000000000001ec .LBB341
     /tmp/ccCh3VK6.s:586    .text:00000000000001f8 .LBE341
     /tmp/ccCh3VK6.s:590    .text:00000000000001f8 .LBB342
     /tmp/ccCh3VK6.s:622    .text:0000000000000204 .LBE342
     /tmp/ccCh3VK6.s:626    .text:0000000000000204 .LBB343
     /tmp/ccCh3VK6.s:715    .text:0000000000000268 .LBE343
     /tmp/ccCh3VK6.s:719    .text:0000000000000268 .LBB344
     /tmp/ccCh3VK6.s:826    .text:00000000000002b0 .LBE344
     /tmp/ccCh3VK6.s:846    .text:00000000000002c8 .LBB345
     /tmp/ccCh3VK6.s:1314   .text:00000000000004bc .LBE345
     /tmp/ccCh3VK6.s:1318   .text:00000000000004bc .LBB346
     /tmp/ccCh3VK6.s:1385   .text:00000000000004f4 .LBE346
     /tmp/ccCh3VK6.s:646    .text:0000000000000210 .LBB162
     /tmp/ccCh3VK6.s:700    .text:0000000000000268 .LBE162
     /tmp/ccCh3VK6.s:734    .text:0000000000000268 .LBB169
     /tmp/ccCh3VK6.s:754    .text:000000000000028c .LBE169
     /tmp/ccCh3VK6.s:697    .text:0000000000000268 .LBB167
     /tmp/ccCh3VK6.s:699    .text:0000000000000268 .LBE167
     /tmp/ccCh3VK6.s:735    .text:0000000000000268 .LBB168
     /tmp/ccCh3VK6.s:749    .text:0000000000000288 .LBE168
     /tmp/ccCh3VK6.s:1241   .text:000000000000045c .LBB171
     /tmp/ccCh3VK6.s:1300   .text:00000000000004bc .LBE171
     /tmp/ccCh3VK6.s:1332   .text:00000000000004bc .LBB178
     /tmp/ccCh3VK6.s:1368   .text:00000000000004f0 .LBE178
     /tmp/ccCh3VK6.s:1285   .text:00000000000004a0 .LBB176
     /tmp/ccCh3VK6.s:1299   .text:00000000000004bc .LBE176
     /tmp/ccCh3VK6.s:1333   .text:00000000000004bc .LBB177
     /tmp/ccCh3VK6.s:1344   .text:00000000000004d4 .LBE177
     /tmp/ccCh3VK6.s:1175   .text:000000000000041c .LBB187
     /tmp/ccCh3VK6.s:1199   .text:0000000000000430 .LBE187
     /tmp/ccCh3VK6.s:1203   .text:0000000000000434 .LBB188
     /tmp/ccCh3VK6.s:1213   .text:0000000000000444 .LBE188
     /tmp/ccCh3VK6.s:1131   .text:00000000000003f0 .LBB195
     /tmp/ccCh3VK6.s:1159   .text:0000000000000408 .LBE195
     /tmp/ccCh3VK6.s:1163   .text:000000000000040c .LBB196
     /tmp/ccCh3VK6.s:1173   .text:000000000000041c .LBE196
     /tmp/ccCh3VK6.s:1091   .text:00000000000003c8 .LBB204
     /tmp/ccCh3VK6.s:1115   .text:00000000000003dc .LBE204
     /tmp/ccCh3VK6.s:1119   .text:00000000000003e0 .LBB205
     /tmp/ccCh3VK6.s:1129   .text:00000000000003f0 .LBE205
GAS LISTING /tmp/ccCh3VK6.s 			page 64


     /tmp/ccCh3VK6.s:1051   .text:00000000000003a0 .LBB214
     /tmp/ccCh3VK6.s:1075   .text:00000000000003b4 .LBE214
     /tmp/ccCh3VK6.s:1079   .text:00000000000003b8 .LBB215
     /tmp/ccCh3VK6.s:1089   .text:00000000000003c8 .LBE215
     /tmp/ccCh3VK6.s:1011   .text:0000000000000378 .LBB225
     /tmp/ccCh3VK6.s:1035   .text:000000000000038c .LBE225
     /tmp/ccCh3VK6.s:1039   .text:0000000000000390 .LBB226
     /tmp/ccCh3VK6.s:1049   .text:00000000000003a0 .LBE226
     /tmp/ccCh3VK6.s:963    .text:0000000000000344 .LBB237
     /tmp/ccCh3VK6.s:999    .text:000000000000036c .LBE237
     /tmp/ccCh3VK6.s:1003   .text:0000000000000370 .LBB238
     /tmp/ccCh3VK6.s:1009   .text:0000000000000378 .LBE238
     /tmp/ccCh3VK6.s:875    .text:00000000000002e0 .LBB276
     /tmp/ccCh3VK6.s:917    .text:000000000000030c .LBE276
     /tmp/ccCh3VK6.s:921    .text:0000000000000310 .LBB277
     /tmp/ccCh3VK6.s:927    .text:0000000000000318 .LBE277

UNDEFINED SYMBOLS
_Z11printStringPKc
_Z8printIntiii
_ZN8kConsole4putcEc
CONSOLE_STATUS
_ZN8kConsole6outputE
_ZN8IOBuffer3getEv
CONSOLE_TX_DATA
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPv
_ZN3TCB12createThreadEPFvPvEPmS0_
_ZN3TCB4exitEv
_ZN3TCB16timeSliceCounterE
_ZN3TCB8dispatchEv
_ZN10kSemaphore10create_semEm
_ZN10kSemaphore5closeEv
_ZN10kSemaphore4waitEv
_ZN10kSemaphore6signalEv
_ZN10kSemaphore9timedWaitEm
_ZN10kSemaphore7trywaitEv
_ZN3TCB5sleepEm
_ZN8kConsole5inputE
CONSOLE_RX_DATA
_ZN8IOBuffer3putEc
_ZN8kConsole4getcEv
_ZN3TCB4wakeEv
_ZN10kSemaphore12getWaitTimerEv
_ZN3TCB7runningE
plic_claim
plic_complete
_Z4putcc
